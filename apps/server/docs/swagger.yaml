basePath: /api/v1
definitions:
  auth.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
      token:
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/auth.Model'
    type: object
  auth.Model:
    properties:
      active:
        type: boolean
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      twofa_status:
        type: boolean
      updatedAt:
        type: string
    type: object
  auth.RefreshTokenDto:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  auth.RegisterDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.TwoFADisableRequestDto:
    description: TwoFADisableRequestDto is used to request 2FA disable
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.TwoFASetupRequestDto:
    description: TwoFASetupRequestDto is used to request 2FA setup
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.TwoFASetupResponseDto:
    description: TwoFASetupResponseDto is used to respond with 2FA setup info
    properties:
      provisioningUri:
        type: string
      secret:
        type: string
    type: object
  auth.TwoFAVerifyRequestDto:
    description: TwoFAVerifyRequestDto is used to verify a TOTP code
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  auth.TwoFAVerifyResponseDto:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  auth.UpdatePasswordDto:
    description: UpdatePasswordDto is used for updating user password
    properties:
      currentPassword:
        type: string
      newPassword:
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  heartbeat.Model:
    properties:
      down_count:
        type: integer
      duration:
        type: integer
      end_time:
        type: string
      id:
        type: string
      important:
        type: boolean
      monitor_id:
        type: string
      msg:
        type: string
      notified:
        type: boolean
      ping:
        type: integer
      retries:
        type: integer
      status:
        $ref: '#/definitions/shared.MonitorStatus'
      time:
        type: string
    type: object
  heartbeat.MonitorStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - MonitorStatusDown
    - MonitorStatusUp
    - MonitorStatusPending
    - MonitorStatusMaintenance
  maintenance.CreateUpdateDto:
    properties:
      active:
        type: boolean
      cron:
        type: string
      days_of_month:
        items:
          type: integer
        type: array
      description:
        type: string
      duration:
        minimum: 1
        type: integer
      end_date_time:
        type: string
      end_time:
        type: string
      interval_day:
        type: integer
      monitor_ids:
        items:
          type: string
        type: array
      start_date_time:
        type: string
      start_time:
        type: string
      strategy:
        type: string
      timezone:
        type: string
      title:
        type: string
      weekdays:
        items:
          type: integer
        type: array
    required:
    - strategy
    - title
    type: object
  maintenance.MaintenanceResponseDto:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      cron:
        type: string
      days_of_month:
        items:
          type: integer
        type: array
      description:
        type: string
      duration:
        type: integer
      end_date_time:
        type: string
      end_time:
        type: string
      id:
        type: string
      interval_day:
        type: integer
      monitor_ids:
        items:
          type: string
        type: array
      start_date_time:
        type: string
      start_time:
        type: string
      strategy:
        type: string
      timezone:
        type: string
      title:
        type: string
      updated_at:
        type: string
      weekdays:
        items:
          type: integer
        type: array
    type: object
  maintenance.Model:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      cron:
        type: string
      days_of_month:
        items:
          type: integer
        type: array
      description:
        type: string
      duration:
        type: integer
      end_date_time:
        type: string
      end_time:
        type: string
      id:
        type: string
      interval_day:
        type: integer
      start_date_time:
        type: string
      start_time:
        type: string
      strategy:
        type: string
      timezone:
        type: string
      title:
        type: string
      updated_at:
        type: string
      weekdays:
        items:
          type: integer
        type: array
    type: object
  maintenance.PartialUpdateDto:
    properties:
      active:
        type: boolean
      cron:
        type: string
      days_of_month:
        items:
          type: integer
        type: array
      description:
        type: string
      duration:
        minimum: 1
        type: integer
      end_date_time:
        type: string
      end_time:
        type: string
      interval_day:
        type: integer
      monitor_ids:
        items:
          type: string
        type: array
      start_date_time:
        type: string
      start_time:
        type: string
      strategy:
        type: string
      timezone:
        type: string
      title:
        type: string
      weekdays:
        items:
          type: integer
        type: array
    type: object
  monitor.CreateUpdateDto:
    properties:
      active:
        example: true
        type: boolean
      config:
        type: string
      interval:
        example: 60
        minimum: 20
        type: integer
      max_retries:
        example: 3
        minimum: 0
        type: integer
      name:
        example: My Monitor
        minLength: 3
        type: string
      notification_ids:
        example:
        - 6830ad485361f19c598d6d90
        items:
          type: string
        type: array
      proxy_id:
        example: 6830ad485361f19c598d6d90
        type: string
      push_token:
        type: string
      resend_interval:
        example: 10
        minimum: 0
        type: integer
      retry_interval:
        example: 60
        minimum: 20
        type: integer
      tag_ids:
        example:
        - 6830ad485361f19c598d6d90
        - 6830ad485361f19c598d6d91
        items:
          type: string
        type: array
      timeout:
        example: 16
        minimum: 16
        type: integer
      type:
        example: http
        type: string
    required:
    - name
    - notification_ids
    - type
    type: object
  monitor.CustomUptimeStatsDto:
    properties:
      7d:
        type: number
      24h:
        type: number
      30d:
        type: number
      365d:
        type: number
    type: object
  monitor.Model:
    properties:
      active:
        type: boolean
      config:
        type: string
      created_at:
        type: string
      id:
        type: string
      interval:
        description: monitor interval in seconds to do request to url
        example: 60
        type: integer
      max_retries:
        description: Maximum retries before the service is marked as down and a notification
          is sent
        example: 3
        type: integer
      name:
        description: monitor name
        example: Monitor
        type: string
      proxy_id:
        type: string
      push_token:
        type: string
      resend_interval:
        description: Resend Notification if Down X times consecutively
        example: 10
        type: integer
      retry_interval:
        description: Retry interval in seconds to do request to url
        example: 60
        type: integer
      status:
        $ref: '#/definitions/shared.MonitorStatus'
      timeout:
        description: monitor timeout in seconds to do request otherwise stop request
        example: 16
        type: integer
      type:
        description: 'connection type: http, tcp, ping, etc'
        example: http
        type: string
      updated_at:
        type: string
    required:
    - type
    type: object
  monitor.MonitorResponseDto:
    properties:
      active:
        default: true
        example: true
        type: boolean
      config:
        type: string
      created_at:
        example: "2024-06-01T12:00:00Z"
        type: string
      id:
        example: 60c72b2f9b1e8b6f1f8e4b1a
        type: string
      interval:
        example: 60
        type: integer
      max_retries:
        example: 3
        type: integer
      name:
        example: My Monitor
        type: string
      notification_ids:
        example:
        - 6830ad485361f19c598d6d90
        items:
          type: string
        type: array
      proxy_id:
        example: 6830ad485361f19c598d6d90
        type: string
      push_token:
        type: string
      resend_interval:
        example: 3
        type: integer
      retry_interval:
        example: 10
        type: integer
      status:
        example: 1
        type: integer
      tag_ids:
        example:
        - 6830ad485361f19c598d6d90
        - 6830ad485361f19c598d6d91
        items:
          type: string
        type: array
      timeout:
        example: 10
        type: integer
      type:
        example: http
        type: string
      updated_at:
        example: "2024-06-01T12:00:00Z"
        type: string
    type: object
  monitor.PartialUpdateDto:
    properties:
      active:
        example: true
        type: boolean
      config:
        type: string
      interval:
        example: 60
        type: integer
      max_retries:
        example: 3
        type: integer
      name:
        example: My Monitor
        type: string
      notification_ids:
        example:
        - 6830ad485361f19c598d6d90
        items:
          type: string
        type: array
      proxy_id:
        example: 6830ad485361f19c598d6d90
        type: string
      push_token:
        type: string
      resend_interval:
        example: 10
        type: integer
      retry_interval:
        example: 60
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/heartbeat.MonitorStatus'
        example: 1
      tag_ids:
        example:
        - 6830ad485361f19c598d6d90
        - 6830ad485361f19c598d6d91
        items:
          type: string
        type: array
      timeout:
        example: 16
        type: integer
      type:
        example: http
        type: string
    type: object
  monitor.StatPoint:
    properties:
      down:
        type: integer
      maintenance:
        type: integer
      ping:
        type: number
      ping_max:
        type: number
      ping_min:
        type: number
      timestamp:
        type: integer
      up:
        type: integer
    type: object
  monitor.StatPointsSummaryDto:
    description: Stat points and summary for a period
    properties:
      avgPing:
        type: number
      maxPing:
        type: number
      minPing:
        type: number
      points:
        items:
          $ref: '#/definitions/monitor.StatPoint'
        type: array
      uptime:
        type: number
    type: object
  notification_channel.CreateUpdateDto:
    properties:
      active:
        type: boolean
      config:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      type:
        type: string
    type: object
  notification_channel.Model:
    properties:
      active:
        type: boolean
      config:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  notification_channel.PartialUpdateDto:
    properties:
      active:
        type: boolean
      config:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      type:
        type: string
    type: object
  proxy.CreateUpdateDto:
    properties:
      auth:
        type: boolean
      host:
        type: string
      password:
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      protocol:
        enum:
        - http
        - https
        - socks
        - socks4
        - socks5
        - socks5h
        type: string
      username:
        type: string
    required:
    - host
    - port
    - protocol
    type: object
  proxy.Model:
    properties:
      auth:
        type: boolean
      createdDate:
        type: string
      host:
        type: string
      id:
        type: string
      password:
        type: string
      port:
        type: integer
      protocol:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  proxy.PartialUpdateDto:
    properties:
      auth:
        type: boolean
      host:
        type: string
      password:
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      protocol:
        enum:
        - http
        - https
        - socks
        - socks4
        - socks5
        - socks5h
        type: string
      username:
        type: string
    type: object
  setting.CreateUpdateDto:
    properties:
      type:
        enum:
        - string
        - int
        - bool
        - json
        type: string
      value:
        type: string
    required:
    - type
    type: object
  setting.Model:
    properties:
      created_at:
        type: string
      id:
        type: string
      key:
        type: string
      type:
        type: string
      updated_at:
        type: string
      value:
        type: string
    type: object
  shared.MonitorStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - MonitorStatusDown
    - MonitorStatusUp
    - MonitorStatusPending
    - MonitorStatusMaintenance
  status_page.CreateStatusPageDTO:
    properties:
      auto_refresh_interval:
        type: integer
      custom_css:
        type: string
      description:
        type: string
      domain:
        type: string
      footer_text:
        type: string
      google_analytics_tag_id:
        type: string
      icon:
        type: string
      monitor_ids:
        items:
          type: string
        type: array
      password:
        type: string
      published:
        type: boolean
      search_engine_index:
        type: boolean
      show_certificate_expiry:
        type: boolean
      show_powered_by:
        type: boolean
      show_tags:
        type: boolean
      slug:
        minLength: 3
        type: string
      theme:
        type: string
      title:
        minLength: 3
        type: string
    required:
    - slug
    - title
    type: object
  status_page.Model:
    properties:
      auto_refresh_interval:
        type: integer
      created_at:
        type: string
      description:
        type: string
      domain:
        type: string
      footer_text:
        type: string
      icon:
        type: string
      id:
        type: string
      published:
        type: boolean
      slug:
        type: string
      theme:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  status_page.MonitorWithHeartbeatsAndUptimeDTO:
    properties:
      active:
        type: boolean
      heartbeats:
        items:
          $ref: '#/definitions/status_page.PublicHeartbeatDTO'
        type: array
      id:
        type: string
      name:
        example: Monitor
        type: string
      type:
        example: http
        type: string
      uptime_24h:
        type: number
    required:
    - type
    type: object
  status_page.PublicHeartbeatDTO:
    properties:
      end_time:
        type: string
      id:
        type: string
      ping:
        type: integer
      status:
        $ref: '#/definitions/shared.MonitorStatus'
      time:
        type: string
    type: object
  status_page.StatusPageWithMonitorsResponseDTO:
    properties:
      auto_refresh_interval:
        type: integer
      created_at:
        type: string
      custom_css:
        type: string
      description:
        type: string
      domain:
        type: string
      footer_text:
        type: string
      google_analytics_tag_id:
        type: string
      icon:
        type: string
      id:
        type: string
      monitor_ids:
        items:
          type: string
        type: array
      password:
        type: string
      published:
        type: boolean
      search_engine_index:
        type: boolean
      show_certificate_expiry:
        type: boolean
      show_powered_by:
        type: boolean
      show_tags:
        type: boolean
      slug:
        type: string
      theme:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  status_page.UpdateStatusPageDTO:
    properties:
      auto_refresh_interval:
        type: integer
      custom_css:
        type: string
      description:
        type: string
      domain:
        type: string
      footer_text:
        type: string
      google_analytics_tag_id:
        type: string
      icon:
        type: string
      monitor_ids:
        items:
          type: string
        type: array
      password:
        type: string
      published:
        type: boolean
      search_engine_index:
        type: boolean
      show_certificate_expiry:
        type: boolean
      show_powered_by:
        type: boolean
      show_tags:
        type: boolean
      slug:
        type: string
      theme:
        type: string
      title:
        type: string
    type: object
  tag.CreateUpdateDto:
    properties:
      color:
        example: '#3B82F6'
        type: string
      description:
        example: Production environment monitors
        type: string
      name:
        example: Production
        maxLength: 100
        minLength: 1
        type: string
    required:
    - color
    - name
    type: object
  tag.Model:
    properties:
      color:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  tag.PartialUpdateDto:
    properties:
      color:
        example: '#3B82F6'
        type: string
      description:
        example: Production environment monitors
        type: string
      name:
        example: Production
        maxLength: 100
        minLength: 1
        type: string
    type: object
  utils.APIError:
    properties:
      message:
        type: string
      status:
        type: string
    required:
    - message
    - status
    type: object
  utils.ApiResponse-any:
    properties:
      data: {}
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-array_heartbeat_Model:
    properties:
      data:
        items:
          $ref: '#/definitions/heartbeat.Model'
        type: array
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-array_maintenance_Model:
    properties:
      data:
        items:
          $ref: '#/definitions/maintenance.Model'
        type: array
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-array_monitor_Model:
    properties:
      data:
        items:
          $ref: '#/definitions/monitor.Model'
        type: array
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-array_notification_channel_Model:
    properties:
      data:
        items:
          $ref: '#/definitions/notification_channel.Model'
        type: array
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-array_proxy_Model:
    properties:
      data:
        items:
          $ref: '#/definitions/proxy.Model'
        type: array
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-array_status_page_Model:
    properties:
      data:
        items:
          $ref: '#/definitions/status_page.Model'
        type: array
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-array_status_page_MonitorWithHeartbeatsAndUptimeDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/status_page.MonitorWithHeartbeatsAndUptimeDTO'
        type: array
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-array_tag_Model:
    properties:
      data:
        items:
          $ref: '#/definitions/tag.Model'
        type: array
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-auth_LoginResponse:
    properties:
      data:
        $ref: '#/definitions/auth.LoginResponse'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-maintenance_MaintenanceResponseDto:
    properties:
      data:
        $ref: '#/definitions/maintenance.MaintenanceResponseDto'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-maintenance_Model:
    properties:
      data:
        $ref: '#/definitions/maintenance.Model'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-monitor_CustomUptimeStatsDto:
    properties:
      data:
        $ref: '#/definitions/monitor.CustomUptimeStatsDto'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-monitor_Model:
    properties:
      data:
        $ref: '#/definitions/monitor.Model'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-monitor_MonitorResponseDto:
    properties:
      data:
        $ref: '#/definitions/monitor.MonitorResponseDto'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-monitor_StatPointsSummaryDto:
    properties:
      data:
        $ref: '#/definitions/monitor.StatPointsSummaryDto'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-notification_channel_Model:
    properties:
      data:
        $ref: '#/definitions/notification_channel.Model'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-proxy_Model:
    properties:
      data:
        $ref: '#/definitions/proxy.Model'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-setting_Model:
    properties:
      data:
        $ref: '#/definitions/setting.Model'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-status_page_Model:
    properties:
      data:
        $ref: '#/definitions/status_page.Model'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-status_page_StatusPageWithMonitorsResponseDTO:
    properties:
      data:
        $ref: '#/definitions/status_page.StatusPageWithMonitorsResponseDTO'
      message:
        type: string
    required:
    - data
    - message
    type: object
  utils.ApiResponse-tag_Model:
    properties:
      data:
        $ref: '#/definitions/tag.Model'
      message:
        type: string
    required:
    - data
    - message
    type: object
info:
  contact: {}
  title: Peekaping API
paths:
  /auth/2fa/disable:
    post:
      consumes:
      - application/json
      parameters:
      - description: 2FA disable request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.TwoFADisableRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Disable 2FA (TOTP) for user
      tags:
      - Auth
  /auth/2fa/setup:
    post:
      consumes:
      - application/json
      parameters:
      - description: 2FA setup request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.TwoFASetupRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TwoFASetupResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Enable 2FA (TOTP) for user
      tags:
      - Auth
  /auth/2fa/verify:
    post:
      consumes:
      - application/json
      parameters:
      - description: 2FA verify request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.TwoFAVerifyRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TwoFAVerifyResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.TwoFAVerifyResponseDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Verify 2FA (TOTP) code for user
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-auth_LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Login admin
      tags:
      - Auth
  /auth/password:
    put:
      consumes:
      - application/json
      parameters:
      - description: Password update data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.UpdatePasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Update user password
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: Refresh token data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-auth_LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Registration data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.ApiResponse-auth_LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Register new admin
      tags:
      - Auth
  /health:
    get:
      description: Returns the current server health
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get server health
      tags:
      - System
  /maintenances:
    get:
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - description: Filter by strategy
        in: query
        name: strategy
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_maintenance_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get maintenances
      tags:
      - Maintenances
    post:
      consumes:
      - application/json
      parameters:
      - description: Maintenance object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/maintenance.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.ApiResponse-maintenance_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Create maintenance
      tags:
      - Maintenances
  /maintenances/{id}:
    delete:
      parameters:
      - description: Maintenance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Delete maintenance
      tags:
      - Maintenances
    get:
      parameters:
      - description: Maintenance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-maintenance_MaintenanceResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get maintenance by ID
      tags:
      - Maintenances
    patch:
      consumes:
      - application/json
      parameters:
      - description: Maintenance ID
        in: path
        name: id
        required: true
        type: string
      - description: Maintenance object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/maintenance.PartialUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-maintenance_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update maintenance
      tags:
      - Maintenances
    put:
      consumes:
      - application/json
      parameters:
      - description: Maintenance ID
        in: path
        name: id
        required: true
        type: string
      - description: Maintenance object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/maintenance.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-maintenance_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update maintenance
      tags:
      - Maintenances
  /maintenances/{id}/pause:
    patch:
      parameters:
      - description: Maintenance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-maintenance_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Pause maintenance
      tags:
      - Maintenances
  /maintenances/{id}/resume:
    patch:
      parameters:
      - description: Maintenance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-maintenance_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Resume maintenance
      tags:
      - Maintenances
  /monitors:
    get:
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Active status
        in: query
        name: active
        type: boolean
      - description: Status
        in: query
        name: status
        type: integer
      - description: Comma-separated list of tag IDs to filter by
        in: query
        name: tag_ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_monitor_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get monitors
      tags:
      - Monitors
    post:
      consumes:
      - application/json
      parameters:
      - description: Monitor object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/monitor.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.ApiResponse-monitor_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Create monitor
      tags:
      - Monitors
  /monitors/{id}:
    delete:
      parameters:
      - description: Monitor ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Delete monitor
      tags:
      - Monitors
    get:
      parameters:
      - description: Monitor ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-monitor_MonitorResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get monitor by ID
      tags:
      - Monitors
    patch:
      consumes:
      - application/json
      parameters:
      - description: Monitor ID
        in: path
        name: id
        required: true
        type: string
      - description: Monitor object
        in: body
        name: monitor
        required: true
        schema:
          $ref: '#/definitions/monitor.PartialUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-monitor_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update monitor
      tags:
      - Monitors
    put:
      consumes:
      - application/json
      parameters:
      - description: Monitor ID
        in: path
        name: id
        required: true
        type: string
      - description: Monitor object
        in: body
        name: monitor
        required: true
        schema:
          $ref: '#/definitions/monitor.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-monitor_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update monitor
      tags:
      - Monitors
  /monitors/{id}/heartbeats:
    get:
      parameters:
      - description: Monitor ID
        in: path
        name: id
        required: true
        type: string
      - description: Number of heartbeats per page (default 50)
        in: query
        name: limit
        type: integer
      - description: Page number (default 0)
        in: query
        name: page
        type: integer
      - description: Filter by important heartbeats only
        in: query
        name: important
        type: boolean
      - description: Reverse the order of heartbeats
        in: query
        name: reverse
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_heartbeat_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get paginated heartbeats for a monitor
      tags:
      - Monitors
  /monitors/{id}/reset:
    post:
      parameters:
      - description: Monitor ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Reset monitor data (heartbeats and stats)
      tags:
      - Monitors
  /monitors/{id}/stats/points:
    get:
      parameters:
      - description: Monitor ID
        in: path
        name: id
        required: true
        type: string
      - description: Start time (RFC3339)
        in: query
        name: since
        required: true
        type: string
      - description: End time (RFC3339, default now)
        in: query
        name: until
        type: string
      - description: Granularity (minute, hour, day)
        in: query
        name: granularity
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-monitor_StatPointsSummaryDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get monitor stat points (ping/up/down) from stats tables
      tags:
      - Monitors
  /monitors/{id}/stats/uptime:
    get:
      parameters:
      - description: Monitor ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-monitor_CustomUptimeStatsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get monitor uptime stats (24h, 30d, 365d)
      tags:
      - Monitors
  /monitors/batch:
    get:
      parameters:
      - description: Comma-separated list of monitor IDs
        in: query
        name: ids
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_monitor_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get monitors by IDs
      tags:
      - Monitors
  /notification-channels:
    get:
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_notification_channel_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get notification channels
      tags:
      - Notification channels
    post:
      consumes:
      - application/json
      parameters:
      - description: Notification object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/notification_channel.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.ApiResponse-notification_channel_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Create notification channel
      tags:
      - Notification channels
  /notification-channels/{id}:
    delete:
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Delete notification channel
      tags:
      - Notification channels
    get:
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-notification_channel_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get notification channel by ID
      tags:
      - Notification channels
    patch:
      consumes:
      - application/json
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      - description: Notification object
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/notification_channel.PartialUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-notification_channel_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update notification channel
      tags:
      - Notification channels
    put:
      consumes:
      - application/json
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      - description: Notification object
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/notification_channel.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-notification_channel_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update notification channel
      tags:
      - Notification channels
  /notification-channels/test:
    post:
      consumes:
      - application/json
      parameters:
      - description: Notification object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/notification_channel.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Test notification channel
      tags:
      - Notification channels
  /proxies:
    get:
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_proxy_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get proxies
      tags:
      - Proxies
    post:
      consumes:
      - application/json
      parameters:
      - description: Proxy object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/proxy.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.ApiResponse-proxy_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Create proxy
      tags:
      - Proxies
  /proxies/{id}:
    delete:
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Delete proxy
      tags:
      - Proxies
    get:
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-proxy_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get proxy by ID
      tags:
      - Proxies
    patch:
      consumes:
      - application/json
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: string
      - description: Proxy object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/proxy.PartialUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-proxy_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update proxy
      tags:
      - Proxies
    put:
      consumes:
      - application/json
      parameters:
      - description: Proxy ID
        in: path
        name: id
        required: true
        type: string
      - description: Proxy object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/proxy.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-proxy_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update proxy
      tags:
      - Proxies
  /settings/key/{key}:
    delete:
      parameters:
      - description: Setting Key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Delete setting by key
      tags:
      - Settings
    get:
      parameters:
      - description: Setting Key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-setting_Model'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get setting by key
      tags:
      - Settings
    put:
      consumes:
      - application/json
      parameters:
      - description: Setting Key
        in: path
        name: key
        required: true
        type: string
      - description: Setting object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/setting.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-setting_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Set setting by key
      tags:
      - Settings
  /status-pages:
    get:
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - default: 0
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_status_page_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get all status pages
      tags:
      - Status Pages
    post:
      consumes:
      - application/json
      parameters:
      - description: Status Page object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/status_page.CreateStatusPageDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.ApiResponse-status_page_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Create a new status page
      tags:
      - Status Pages
  /status-pages/{id}:
    delete:
      parameters:
      - description: Status Page ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Delete a status page
      tags:
      - Status Pages
    get:
      parameters:
      - description: Status Page ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-status_page_StatusPageWithMonitorsResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get a status page by ID
      tags:
      - Status Pages
    patch:
      consumes:
      - application/json
      parameters:
      - description: Status Page ID
        in: path
        name: id
        required: true
        type: string
      - description: Status Page object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/status_page.UpdateStatusPageDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-status_page_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update a status page
      tags:
      - Status Pages
  /status-pages/domain/{domain}:
    get:
      parameters:
      - description: Domain Name
        in: path
        name: domain
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-status_page_Model'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Get a status page by domain name
      tags:
      - Status Pages
  /status-pages/slug/{slug}:
    get:
      parameters:
      - description: Status Page Slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-status_page_Model'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Get a status page by slug
      tags:
      - Status Pages
  /status-pages/slug/{slug}/monitors:
    get:
      parameters:
      - description: Status Page Slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_status_page_MonitorWithHeartbeatsAndUptimeDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Get monitors for a status page by slug with heartbeats and uptime
      tags:
      - Status Pages
  /status-pages/slug/{slug}/monitors/homepage:
    get:
      parameters:
      - description: Status Page Slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_status_page_MonitorWithHeartbeatsAndUptimeDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Get monitors for a status page by slug for homepage
      tags:
      - Status Pages
  /tags:
    get:
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-array_tag_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get tags
      tags:
      - Tags
    post:
      consumes:
      - application/json
      parameters:
      - description: Tag object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/tag.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.ApiResponse-tag_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Create tag
      tags:
      - Tags
  /tags/{id}:
    delete:
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Delete tag
      tags:
      - Tags
    get:
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-tag_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Get tag by ID
      tags:
      - Tags
    patch:
      consumes:
      - application/json
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      - description: Tag object
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/tag.PartialUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-tag_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update tag
      tags:
      - Tags
    put:
      consumes:
      - application/json
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      - description: Tag object
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/tag.CreateUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ApiResponse-tag_Model'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
      - BearerAuth: []
      summary: Update tag
      tags:
      - Tags
  /version:
    get:
      description: Returns the current server version
      produces:
      - application/json
      responses:
        "200":
          description: '{"version": "1.2.3"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get server version
      tags:
      - System
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
