// This file is auto-generated by @hey-api/openapi-ts

export type AuthLoginDto = {
    email: string;
    password: string;
    token?: string;
};

export type AuthLoginResponse = {
    accessToken?: string;
    refreshToken?: string;
    user?: AuthModel;
};

export type AuthModel = {
    active?: boolean;
    createdAt?: string;
    email?: string;
    id?: string;
    twofa_status?: boolean;
    updatedAt?: string;
};

export type AuthRefreshTokenDto = {
    refreshToken: string;
};

export type AuthRegisterDto = {
    email: string;
    password: string;
};

/**
 * TwoFADisableRequestDto is used to request 2FA disable
 */
export type AuthTwoFaDisableRequestDto = {
    email: string;
    password: string;
};

/**
 * TwoFASetupRequestDto is used to request 2FA setup
 */
export type AuthTwoFaSetupRequestDto = {
    email: string;
    password: string;
};

/**
 * TwoFASetupResponseDto is used to respond with 2FA setup info
 */
export type AuthTwoFaSetupResponseDto = {
    provisioningUri?: string;
    secret?: string;
};

/**
 * TwoFAVerifyRequestDto is used to verify a TOTP code
 */
export type AuthTwoFaVerifyRequestDto = {
    code: string;
    email: string;
};

export type AuthTwoFaVerifyResponseDto = {
    message?: string;
    success?: boolean;
};

/**
 * UpdatePasswordDto is used for updating user password
 */
export type AuthUpdatePasswordDto = {
    currentPassword: string;
    newPassword: string;
};

export type HeartbeatModel = {
    down_count?: number;
    duration?: number;
    end_time?: string;
    id?: string;
    important?: boolean;
    monitor_id?: string;
    msg?: string;
    notified?: boolean;
    ping?: number;
    retries?: number;
    status?: SharedMonitorStatus;
    time?: string;
};

export type HeartbeatMonitorStatus = 0 | 1 | 2 | 3;

export type MaintenanceCreateUpdateDto = {
    active?: boolean;
    cron?: string;
    days_of_month?: Array<number>;
    description?: string;
    duration?: number;
    end_date_time?: string;
    end_time?: string;
    interval_day?: number;
    monitor_ids?: Array<string>;
    start_date_time?: string;
    start_time?: string;
    strategy: string;
    timezone?: string;
    title: string;
    weekdays?: Array<number>;
};

export type MaintenanceMaintenanceResponseDto = {
    active?: boolean;
    created_at?: string;
    cron?: string;
    days_of_month?: Array<number>;
    description?: string;
    duration?: number;
    end_date_time?: string;
    end_time?: string;
    id?: string;
    interval_day?: number;
    monitor_ids?: Array<string>;
    start_date_time?: string;
    start_time?: string;
    strategy?: string;
    timezone?: string;
    title?: string;
    updated_at?: string;
    weekdays?: Array<number>;
};

export type MaintenanceModel = {
    active?: boolean;
    created_at?: string;
    cron?: string;
    days_of_month?: Array<number>;
    description?: string;
    duration?: number;
    end_date_time?: string;
    end_time?: string;
    id?: string;
    interval_day?: number;
    start_date_time?: string;
    start_time?: string;
    strategy?: string;
    timezone?: string;
    title?: string;
    updated_at?: string;
    weekdays?: Array<number>;
};

export type MaintenancePartialUpdateDto = {
    active?: boolean;
    cron?: string;
    days_of_month?: Array<number>;
    description?: string;
    duration?: number;
    end_date_time?: string;
    end_time?: string;
    interval_day?: number;
    monitor_ids?: Array<string>;
    start_date_time?: string;
    start_time?: string;
    strategy?: string;
    timezone?: string;
    title?: string;
    weekdays?: Array<number>;
};

export type MonitorCreateUpdateDto = {
    active?: boolean;
    config?: string;
    interval?: number;
    max_retries?: number;
    name: string;
    notification_ids: Array<string>;
    proxy_id?: string;
    push_token?: string;
    resend_interval?: number;
    retry_interval?: number;
    tag_ids?: Array<string>;
    timeout?: number;
    type: string;
};

export type MonitorCustomUptimeStatsDto = {
    '24h'?: number;
    '30d'?: number;
    '365d'?: number;
    '7d'?: number;
};

export type MonitorModel = {
    active?: boolean;
    config?: string;
    created_at?: string;
    id?: string;
    /**
     * monitor interval in seconds to do request to url
     */
    interval?: number;
    /**
     * Maximum retries before the service is marked as down and a notification is sent
     */
    max_retries?: number;
    /**
     * monitor name
     */
    name?: string;
    proxy_id?: string;
    push_token?: string;
    /**
     * Resend Notification if Down X times consecutively
     */
    resend_interval?: number;
    /**
     * Retry interval in seconds to do request to url
     */
    retry_interval?: number;
    status?: SharedMonitorStatus;
    /**
     * monitor timeout in seconds to do request otherwise stop request
     */
    timeout?: number;
    /**
     * connection type: http, tcp, ping, etc
     */
    type: string;
    updated_at?: string;
};

export type MonitorMonitorResponseDto = {
    active?: boolean;
    config?: string;
    created_at?: string;
    id?: string;
    interval?: number;
    max_retries?: number;
    name?: string;
    notification_ids?: Array<string>;
    proxy_id?: string;
    push_token?: string;
    resend_interval?: number;
    retry_interval?: number;
    status?: number;
    tag_ids?: Array<string>;
    timeout?: number;
    type?: string;
    updated_at?: string;
};

export type MonitorPartialUpdateDto = {
    active?: boolean;
    config?: string;
    interval?: number;
    max_retries?: number;
    name?: string;
    notification_ids?: Array<string>;
    proxy_id?: string;
    push_token?: string;
    resend_interval?: number;
    retry_interval?: number;
    status?: HeartbeatMonitorStatus;
    tag_ids?: Array<string>;
    timeout?: number;
    type?: string;
};

export type MonitorStatPoint = {
    down?: number;
    maintenance?: number;
    ping?: number;
    ping_max?: number;
    ping_min?: number;
    timestamp?: number;
    up?: number;
};

/**
 * Stat points and summary for a period
 */
export type MonitorStatPointsSummaryDto = {
    avgPing?: number;
    maxPing?: number;
    minPing?: number;
    points?: Array<MonitorStatPoint>;
    uptime?: number;
};

export type NotificationChannelCreateUpdateDto = {
    active?: boolean;
    config?: string;
    is_default?: boolean;
    name?: string;
    type?: string;
};

export type NotificationChannelModel = {
    active?: boolean;
    config?: string;
    created_at?: string;
    id?: string;
    is_default?: boolean;
    name?: string;
    type?: string;
    updated_at?: string;
};

export type NotificationChannelPartialUpdateDto = {
    active?: boolean;
    config?: string;
    is_default?: boolean;
    name?: string;
    type?: string;
};

export type ProxyCreateUpdateDto = {
    auth?: boolean;
    host: string;
    password?: string;
    port: number;
    protocol: 'http' | 'https' | 'socks' | 'socks4' | 'socks5' | 'socks5h';
    username?: string;
};

export type ProxyModel = {
    auth?: boolean;
    createdDate?: string;
    host?: string;
    id?: string;
    password?: string;
    port?: number;
    protocol?: string;
    updatedAt?: string;
    username?: string;
};

export type ProxyPartialUpdateDto = {
    auth?: boolean;
    host?: string;
    password?: string;
    port?: number;
    protocol?: 'http' | 'https' | 'socks' | 'socks4' | 'socks5' | 'socks5h';
    username?: string;
};

export type SettingCreateUpdateDto = {
    type: 'string' | 'int' | 'bool' | 'json';
    value?: string;
};

export type SettingModel = {
    created_at?: string;
    id?: string;
    key?: string;
    type?: string;
    updated_at?: string;
    value?: string;
};

export type SharedMonitorStatus = 0 | 1 | 2 | 3;

export type StatusPageCreateStatusPageDto = {
    auto_refresh_interval?: number;
    custom_css?: string;
    description?: string;
    domain?: string;
    footer_text?: string;
    google_analytics_tag_id?: string;
    icon?: string;
    monitor_ids?: Array<string>;
    password?: string;
    published?: boolean;
    search_engine_index?: boolean;
    show_certificate_expiry?: boolean;
    show_powered_by?: boolean;
    show_tags?: boolean;
    slug: string;
    theme?: string;
    title: string;
};

export type StatusPageModel = {
    auto_refresh_interval?: number;
    created_at?: string;
    description?: string;
    domain?: string;
    footer_text?: string;
    icon?: string;
    id?: string;
    published?: boolean;
    slug?: string;
    theme?: string;
    title?: string;
    updated_at?: string;
};

export type StatusPageMonitorWithHeartbeatsAndUptimeDto = {
    active?: boolean;
    heartbeats?: Array<StatusPagePublicHeartbeatDto>;
    id?: string;
    name?: string;
    type: string;
    uptime_24h?: number;
};

export type StatusPagePublicHeartbeatDto = {
    end_time?: string;
    id?: string;
    ping?: number;
    status?: SharedMonitorStatus;
    time?: string;
};

export type StatusPageStatusPageWithMonitorsResponseDto = {
    auto_refresh_interval?: number;
    created_at?: string;
    custom_css?: string;
    description?: string;
    domain?: string;
    footer_text?: string;
    google_analytics_tag_id?: string;
    icon?: string;
    id?: string;
    monitor_ids?: Array<string>;
    password?: string;
    published?: boolean;
    search_engine_index?: boolean;
    show_certificate_expiry?: boolean;
    show_powered_by?: boolean;
    show_tags?: boolean;
    slug?: string;
    theme?: string;
    title?: string;
    updated_at?: string;
};

export type StatusPageUpdateStatusPageDto = {
    auto_refresh_interval?: number;
    custom_css?: string;
    description?: string;
    domain?: string;
    footer_text?: string;
    google_analytics_tag_id?: string;
    icon?: string;
    monitor_ids?: Array<string>;
    password?: string;
    published?: boolean;
    search_engine_index?: boolean;
    show_certificate_expiry?: boolean;
    show_powered_by?: boolean;
    show_tags?: boolean;
    slug?: string;
    theme?: string;
    title?: string;
};

export type TagCreateUpdateDto = {
    color: string;
    description?: string;
    name: string;
};

export type TagModel = {
    color?: string;
    created_at?: string;
    description?: string;
    id?: string;
    name?: string;
    updated_at?: string;
};

export type TagPartialUpdateDto = {
    color?: string;
    description?: string;
    name?: string;
};

export type UtilsApiError = {
    message: string;
    status: string;
};

export type UtilsApiResponseAny = {
    data: unknown;
    message: string;
};

export type UtilsApiResponseArrayHeartbeatModel = {
    data: Array<HeartbeatModel>;
    message: string;
};

export type UtilsApiResponseArrayMaintenanceModel = {
    data: Array<MaintenanceModel>;
    message: string;
};

export type UtilsApiResponseArrayMonitorModel = {
    data: Array<MonitorModel>;
    message: string;
};

export type UtilsApiResponseArrayNotificationChannelModel = {
    data: Array<NotificationChannelModel>;
    message: string;
};

export type UtilsApiResponseArrayProxyModel = {
    data: Array<ProxyModel>;
    message: string;
};

export type UtilsApiResponseArrayStatusPageModel = {
    data: Array<StatusPageModel>;
    message: string;
};

export type UtilsApiResponseArrayStatusPageMonitorWithHeartbeatsAndUptimeDto = {
    data: Array<StatusPageMonitorWithHeartbeatsAndUptimeDto>;
    message: string;
};

export type UtilsApiResponseArrayTagModel = {
    data: Array<TagModel>;
    message: string;
};

export type UtilsApiResponseAuthLoginResponse = {
    data: AuthLoginResponse;
    message: string;
};

export type UtilsApiResponseMaintenanceMaintenanceResponseDto = {
    data: MaintenanceMaintenanceResponseDto;
    message: string;
};

export type UtilsApiResponseMaintenanceModel = {
    data: MaintenanceModel;
    message: string;
};

export type UtilsApiResponseMonitorCustomUptimeStatsDto = {
    data: MonitorCustomUptimeStatsDto;
    message: string;
};

export type UtilsApiResponseMonitorModel = {
    data: MonitorModel;
    message: string;
};

export type UtilsApiResponseMonitorMonitorResponseDto = {
    data: MonitorMonitorResponseDto;
    message: string;
};

export type UtilsApiResponseMonitorStatPointsSummaryDto = {
    data: MonitorStatPointsSummaryDto;
    message: string;
};

export type UtilsApiResponseNotificationChannelModel = {
    data: NotificationChannelModel;
    message: string;
};

export type UtilsApiResponseProxyModel = {
    data: ProxyModel;
    message: string;
};

export type UtilsApiResponseSettingModel = {
    data: SettingModel;
    message: string;
};

export type UtilsApiResponseStatusPageModel = {
    data: StatusPageModel;
    message: string;
};

export type UtilsApiResponseStatusPageStatusPageWithMonitorsResponseDto = {
    data: StatusPageStatusPageWithMonitorsResponseDto;
    message: string;
};

export type UtilsApiResponseTagModel = {
    data: TagModel;
    message: string;
};

export type PostAuth2FaDisableData = {
    /**
     * 2FA disable request
     */
    body: AuthTwoFaDisableRequestDto;
    path?: never;
    query?: never;
    url: '/auth/2fa/disable';
};

export type PostAuth2FaDisableErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostAuth2FaDisableError = PostAuth2FaDisableErrors[keyof PostAuth2FaDisableErrors];

export type PostAuth2FaDisableResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type PostAuth2FaDisableResponse = PostAuth2FaDisableResponses[keyof PostAuth2FaDisableResponses];

export type PostAuth2FaSetupData = {
    /**
     * 2FA setup request
     */
    body: AuthTwoFaSetupRequestDto;
    path?: never;
    query?: never;
    url: '/auth/2fa/setup';
};

export type PostAuth2FaSetupErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostAuth2FaSetupError = PostAuth2FaSetupErrors[keyof PostAuth2FaSetupErrors];

export type PostAuth2FaSetupResponses = {
    /**
     * OK
     */
    200: AuthTwoFaSetupResponseDto;
};

export type PostAuth2FaSetupResponse = PostAuth2FaSetupResponses[keyof PostAuth2FaSetupResponses];

export type PostAuth2FaVerifyData = {
    /**
     * 2FA verify request
     */
    body: AuthTwoFaVerifyRequestDto;
    path?: never;
    query?: never;
    url: '/auth/2fa/verify';
};

export type PostAuth2FaVerifyErrors = {
    /**
     * Bad Request
     */
    400: AuthTwoFaVerifyResponseDto;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostAuth2FaVerifyError = PostAuth2FaVerifyErrors[keyof PostAuth2FaVerifyErrors];

export type PostAuth2FaVerifyResponses = {
    /**
     * OK
     */
    200: AuthTwoFaVerifyResponseDto;
};

export type PostAuth2FaVerifyResponse = PostAuth2FaVerifyResponses[keyof PostAuth2FaVerifyResponses];

export type PostAuthLoginData = {
    /**
     * Login data
     */
    body: AuthLoginDto;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type PostAuthLoginErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAuthLoginResponse;
};

export type PostAuthLoginResponse = PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type PutAuthPasswordData = {
    /**
     * Password update data
     */
    body: AuthUpdatePasswordDto;
    path?: never;
    query?: never;
    url: '/auth/password';
};

export type PutAuthPasswordErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Unauthorized
     */
    401: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PutAuthPasswordError = PutAuthPasswordErrors[keyof PutAuthPasswordErrors];

export type PutAuthPasswordResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type PutAuthPasswordResponse = PutAuthPasswordResponses[keyof PutAuthPasswordResponses];

export type PostAuthRefreshData = {
    /**
     * Refresh token data
     */
    body: AuthRefreshTokenDto;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type PostAuthRefreshErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Unauthorized
     */
    401: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostAuthRefreshError = PostAuthRefreshErrors[keyof PostAuthRefreshErrors];

export type PostAuthRefreshResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAuthLoginResponse;
};

export type PostAuthRefreshResponse = PostAuthRefreshResponses[keyof PostAuthRefreshResponses];

export type PostAuthRegisterData = {
    /**
     * Registration data
     */
    body: AuthRegisterDto;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type PostAuthRegisterErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostAuthRegisterError = PostAuthRegisterErrors[keyof PostAuthRegisterErrors];

export type PostAuthRegisterResponses = {
    /**
     * Created
     */
    201: UtilsApiResponseAuthLoginResponse;
};

export type PostAuthRegisterResponse = PostAuthRegisterResponses[keyof PostAuthRegisterResponses];

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthResponses = {
    /**
     * {"status": "success"}
     */
    200: {
        [key: string]: string;
    };
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type GetMaintenancesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search query
         */
        q?: string;
        /**
         * Filter by strategy
         */
        strategy?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/maintenances';
};

export type GetMaintenancesErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetMaintenancesError = GetMaintenancesErrors[keyof GetMaintenancesErrors];

export type GetMaintenancesResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayMaintenanceModel;
};

export type GetMaintenancesResponse = GetMaintenancesResponses[keyof GetMaintenancesResponses];

export type PostMaintenancesData = {
    /**
     * Maintenance object
     */
    body: MaintenanceCreateUpdateDto;
    path?: never;
    query?: never;
    url: '/maintenances';
};

export type PostMaintenancesErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostMaintenancesError = PostMaintenancesErrors[keyof PostMaintenancesErrors];

export type PostMaintenancesResponses = {
    /**
     * Created
     */
    201: UtilsApiResponseMaintenanceModel;
};

export type PostMaintenancesResponse = PostMaintenancesResponses[keyof PostMaintenancesResponses];

export type DeleteMaintenancesByIdData = {
    body?: never;
    path: {
        /**
         * Maintenance ID
         */
        id: string;
    };
    query?: never;
    url: '/maintenances/{id}';
};

export type DeleteMaintenancesByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type DeleteMaintenancesByIdError = DeleteMaintenancesByIdErrors[keyof DeleteMaintenancesByIdErrors];

export type DeleteMaintenancesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type DeleteMaintenancesByIdResponse = DeleteMaintenancesByIdResponses[keyof DeleteMaintenancesByIdResponses];

export type GetMaintenancesByIdData = {
    body?: never;
    path: {
        /**
         * Maintenance ID
         */
        id: string;
    };
    query?: never;
    url: '/maintenances/{id}';
};

export type GetMaintenancesByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetMaintenancesByIdError = GetMaintenancesByIdErrors[keyof GetMaintenancesByIdErrors];

export type GetMaintenancesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMaintenanceMaintenanceResponseDto;
};

export type GetMaintenancesByIdResponse = GetMaintenancesByIdResponses[keyof GetMaintenancesByIdResponses];

export type PatchMaintenancesByIdData = {
    /**
     * Maintenance object
     */
    body: MaintenancePartialUpdateDto;
    path: {
        /**
         * Maintenance ID
         */
        id: string;
    };
    query?: never;
    url: '/maintenances/{id}';
};

export type PatchMaintenancesByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PatchMaintenancesByIdError = PatchMaintenancesByIdErrors[keyof PatchMaintenancesByIdErrors];

export type PatchMaintenancesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMaintenanceModel;
};

export type PatchMaintenancesByIdResponse = PatchMaintenancesByIdResponses[keyof PatchMaintenancesByIdResponses];

export type PutMaintenancesByIdData = {
    /**
     * Maintenance object
     */
    body: MaintenanceCreateUpdateDto;
    path: {
        /**
         * Maintenance ID
         */
        id: string;
    };
    query?: never;
    url: '/maintenances/{id}';
};

export type PutMaintenancesByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PutMaintenancesByIdError = PutMaintenancesByIdErrors[keyof PutMaintenancesByIdErrors];

export type PutMaintenancesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMaintenanceModel;
};

export type PutMaintenancesByIdResponse = PutMaintenancesByIdResponses[keyof PutMaintenancesByIdResponses];

export type PatchMaintenancesByIdPauseData = {
    body?: never;
    path: {
        /**
         * Maintenance ID
         */
        id: string;
    };
    query?: never;
    url: '/maintenances/{id}/pause';
};

export type PatchMaintenancesByIdPauseErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PatchMaintenancesByIdPauseError = PatchMaintenancesByIdPauseErrors[keyof PatchMaintenancesByIdPauseErrors];

export type PatchMaintenancesByIdPauseResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMaintenanceModel;
};

export type PatchMaintenancesByIdPauseResponse = PatchMaintenancesByIdPauseResponses[keyof PatchMaintenancesByIdPauseResponses];

export type PatchMaintenancesByIdResumeData = {
    body?: never;
    path: {
        /**
         * Maintenance ID
         */
        id: string;
    };
    query?: never;
    url: '/maintenances/{id}/resume';
};

export type PatchMaintenancesByIdResumeErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PatchMaintenancesByIdResumeError = PatchMaintenancesByIdResumeErrors[keyof PatchMaintenancesByIdResumeErrors];

export type PatchMaintenancesByIdResumeResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMaintenanceModel;
};

export type PatchMaintenancesByIdResumeResponse = PatchMaintenancesByIdResumeResponses[keyof PatchMaintenancesByIdResumeResponses];

export type GetMonitorsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search query
         */
        q?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
        /**
         * Active status
         */
        active?: boolean;
        /**
         * Status
         */
        status?: number;
        /**
         * Comma-separated list of tag IDs to filter by
         */
        tag_ids?: string;
    };
    url: '/monitors';
};

export type GetMonitorsErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetMonitorsError = GetMonitorsErrors[keyof GetMonitorsErrors];

export type GetMonitorsResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayMonitorModel;
};

export type GetMonitorsResponse = GetMonitorsResponses[keyof GetMonitorsResponses];

export type PostMonitorsData = {
    /**
     * Monitor object
     */
    body: MonitorCreateUpdateDto;
    path?: never;
    query?: never;
    url: '/monitors';
};

export type PostMonitorsErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostMonitorsError = PostMonitorsErrors[keyof PostMonitorsErrors];

export type PostMonitorsResponses = {
    /**
     * Created
     */
    201: UtilsApiResponseMonitorModel;
};

export type PostMonitorsResponse = PostMonitorsResponses[keyof PostMonitorsResponses];

export type GetMonitorsBatchData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Comma-separated list of monitor IDs
         */
        ids: string;
    };
    url: '/monitors/batch';
};

export type GetMonitorsBatchErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetMonitorsBatchError = GetMonitorsBatchErrors[keyof GetMonitorsBatchErrors];

export type GetMonitorsBatchResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayMonitorModel;
};

export type GetMonitorsBatchResponse = GetMonitorsBatchResponses[keyof GetMonitorsBatchResponses];

export type DeleteMonitorsByIdData = {
    body?: never;
    path: {
        /**
         * Monitor ID
         */
        id: string;
    };
    query?: never;
    url: '/monitors/{id}';
};

export type DeleteMonitorsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type DeleteMonitorsByIdError = DeleteMonitorsByIdErrors[keyof DeleteMonitorsByIdErrors];

export type DeleteMonitorsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type DeleteMonitorsByIdResponse = DeleteMonitorsByIdResponses[keyof DeleteMonitorsByIdResponses];

export type GetMonitorsByIdData = {
    body?: never;
    path: {
        /**
         * Monitor ID
         */
        id: string;
    };
    query?: never;
    url: '/monitors/{id}';
};

export type GetMonitorsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetMonitorsByIdError = GetMonitorsByIdErrors[keyof GetMonitorsByIdErrors];

export type GetMonitorsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMonitorMonitorResponseDto;
};

export type GetMonitorsByIdResponse = GetMonitorsByIdResponses[keyof GetMonitorsByIdResponses];

export type PatchMonitorsByIdData = {
    /**
     * Monitor object
     */
    body: MonitorPartialUpdateDto;
    path: {
        /**
         * Monitor ID
         */
        id: string;
    };
    query?: never;
    url: '/monitors/{id}';
};

export type PatchMonitorsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PatchMonitorsByIdError = PatchMonitorsByIdErrors[keyof PatchMonitorsByIdErrors];

export type PatchMonitorsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMonitorModel;
};

export type PatchMonitorsByIdResponse = PatchMonitorsByIdResponses[keyof PatchMonitorsByIdResponses];

export type PutMonitorsByIdData = {
    /**
     * Monitor object
     */
    body: MonitorCreateUpdateDto;
    path: {
        /**
         * Monitor ID
         */
        id: string;
    };
    query?: never;
    url: '/monitors/{id}';
};

export type PutMonitorsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PutMonitorsByIdError = PutMonitorsByIdErrors[keyof PutMonitorsByIdErrors];

export type PutMonitorsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMonitorModel;
};

export type PutMonitorsByIdResponse = PutMonitorsByIdResponses[keyof PutMonitorsByIdResponses];

export type GetMonitorsByIdHeartbeatsData = {
    body?: never;
    path: {
        /**
         * Monitor ID
         */
        id: string;
    };
    query?: {
        /**
         * Number of heartbeats per page (default 50)
         */
        limit?: number;
        /**
         * Page number (default 0)
         */
        page?: number;
        /**
         * Filter by important heartbeats only
         */
        important?: boolean;
        /**
         * Reverse the order of heartbeats
         */
        reverse?: boolean;
    };
    url: '/monitors/{id}/heartbeats';
};

export type GetMonitorsByIdHeartbeatsErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetMonitorsByIdHeartbeatsError = GetMonitorsByIdHeartbeatsErrors[keyof GetMonitorsByIdHeartbeatsErrors];

export type GetMonitorsByIdHeartbeatsResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayHeartbeatModel;
};

export type GetMonitorsByIdHeartbeatsResponse = GetMonitorsByIdHeartbeatsResponses[keyof GetMonitorsByIdHeartbeatsResponses];

export type PostMonitorsByIdResetData = {
    body?: never;
    path: {
        /**
         * Monitor ID
         */
        id: string;
    };
    query?: never;
    url: '/monitors/{id}/reset';
};

export type PostMonitorsByIdResetErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostMonitorsByIdResetError = PostMonitorsByIdResetErrors[keyof PostMonitorsByIdResetErrors];

export type PostMonitorsByIdResetResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type PostMonitorsByIdResetResponse = PostMonitorsByIdResetResponses[keyof PostMonitorsByIdResetResponses];

export type GetMonitorsByIdStatsPointsData = {
    body?: never;
    path: {
        /**
         * Monitor ID
         */
        id: string;
    };
    query: {
        /**
         * Start time (RFC3339)
         */
        since: string;
        /**
         * End time (RFC3339, default now)
         */
        until?: string;
        /**
         * Granularity (minute, hour, day)
         */
        granularity?: string;
    };
    url: '/monitors/{id}/stats/points';
};

export type GetMonitorsByIdStatsPointsErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetMonitorsByIdStatsPointsError = GetMonitorsByIdStatsPointsErrors[keyof GetMonitorsByIdStatsPointsErrors];

export type GetMonitorsByIdStatsPointsResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMonitorStatPointsSummaryDto;
};

export type GetMonitorsByIdStatsPointsResponse = GetMonitorsByIdStatsPointsResponses[keyof GetMonitorsByIdStatsPointsResponses];

export type GetMonitorsByIdStatsUptimeData = {
    body?: never;
    path: {
        /**
         * Monitor ID
         */
        id: string;
    };
    query?: never;
    url: '/monitors/{id}/stats/uptime';
};

export type GetMonitorsByIdStatsUptimeErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetMonitorsByIdStatsUptimeError = GetMonitorsByIdStatsUptimeErrors[keyof GetMonitorsByIdStatsUptimeErrors];

export type GetMonitorsByIdStatsUptimeResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseMonitorCustomUptimeStatsDto;
};

export type GetMonitorsByIdStatsUptimeResponse = GetMonitorsByIdStatsUptimeResponses[keyof GetMonitorsByIdStatsUptimeResponses];

export type GetNotificationChannelsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search query
         */
        q?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/notification-channels';
};

export type GetNotificationChannelsErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetNotificationChannelsError = GetNotificationChannelsErrors[keyof GetNotificationChannelsErrors];

export type GetNotificationChannelsResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayNotificationChannelModel;
};

export type GetNotificationChannelsResponse = GetNotificationChannelsResponses[keyof GetNotificationChannelsResponses];

export type PostNotificationChannelsData = {
    /**
     * Notification object
     */
    body: NotificationChannelCreateUpdateDto;
    path?: never;
    query?: never;
    url: '/notification-channels';
};

export type PostNotificationChannelsErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostNotificationChannelsError = PostNotificationChannelsErrors[keyof PostNotificationChannelsErrors];

export type PostNotificationChannelsResponses = {
    /**
     * Created
     */
    201: UtilsApiResponseNotificationChannelModel;
};

export type PostNotificationChannelsResponse = PostNotificationChannelsResponses[keyof PostNotificationChannelsResponses];

export type PostNotificationChannelsTestData = {
    /**
     * Notification object
     */
    body: NotificationChannelCreateUpdateDto;
    path?: never;
    query?: never;
    url: '/notification-channels/test';
};

export type PostNotificationChannelsTestErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostNotificationChannelsTestError = PostNotificationChannelsTestErrors[keyof PostNotificationChannelsTestErrors];

export type PostNotificationChannelsTestResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type PostNotificationChannelsTestResponse = PostNotificationChannelsTestResponses[keyof PostNotificationChannelsTestResponses];

export type DeleteNotificationChannelsByIdData = {
    body?: never;
    path: {
        /**
         * Notification ID
         */
        id: string;
    };
    query?: never;
    url: '/notification-channels/{id}';
};

export type DeleteNotificationChannelsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type DeleteNotificationChannelsByIdError = DeleteNotificationChannelsByIdErrors[keyof DeleteNotificationChannelsByIdErrors];

export type DeleteNotificationChannelsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type DeleteNotificationChannelsByIdResponse = DeleteNotificationChannelsByIdResponses[keyof DeleteNotificationChannelsByIdResponses];

export type GetNotificationChannelsByIdData = {
    body?: never;
    path: {
        /**
         * Notification ID
         */
        id: string;
    };
    query?: never;
    url: '/notification-channels/{id}';
};

export type GetNotificationChannelsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetNotificationChannelsByIdError = GetNotificationChannelsByIdErrors[keyof GetNotificationChannelsByIdErrors];

export type GetNotificationChannelsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseNotificationChannelModel;
};

export type GetNotificationChannelsByIdResponse = GetNotificationChannelsByIdResponses[keyof GetNotificationChannelsByIdResponses];

export type PatchNotificationChannelsByIdData = {
    /**
     * Notification object
     */
    body: NotificationChannelPartialUpdateDto;
    path: {
        /**
         * Notification ID
         */
        id: string;
    };
    query?: never;
    url: '/notification-channels/{id}';
};

export type PatchNotificationChannelsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PatchNotificationChannelsByIdError = PatchNotificationChannelsByIdErrors[keyof PatchNotificationChannelsByIdErrors];

export type PatchNotificationChannelsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseNotificationChannelModel;
};

export type PatchNotificationChannelsByIdResponse = PatchNotificationChannelsByIdResponses[keyof PatchNotificationChannelsByIdResponses];

export type PutNotificationChannelsByIdData = {
    /**
     * Notification object
     */
    body: NotificationChannelCreateUpdateDto;
    path: {
        /**
         * Notification ID
         */
        id: string;
    };
    query?: never;
    url: '/notification-channels/{id}';
};

export type PutNotificationChannelsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PutNotificationChannelsByIdError = PutNotificationChannelsByIdErrors[keyof PutNotificationChannelsByIdErrors];

export type PutNotificationChannelsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseNotificationChannelModel;
};

export type PutNotificationChannelsByIdResponse = PutNotificationChannelsByIdResponses[keyof PutNotificationChannelsByIdResponses];

export type GetProxiesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search query
         */
        q?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/proxies';
};

export type GetProxiesErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetProxiesError = GetProxiesErrors[keyof GetProxiesErrors];

export type GetProxiesResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayProxyModel;
};

export type GetProxiesResponse = GetProxiesResponses[keyof GetProxiesResponses];

export type PostProxiesData = {
    /**
     * Proxy object
     */
    body: ProxyCreateUpdateDto;
    path?: never;
    query?: never;
    url: '/proxies';
};

export type PostProxiesErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostProxiesError = PostProxiesErrors[keyof PostProxiesErrors];

export type PostProxiesResponses = {
    /**
     * Created
     */
    201: UtilsApiResponseProxyModel;
};

export type PostProxiesResponse = PostProxiesResponses[keyof PostProxiesResponses];

export type DeleteProxiesByIdData = {
    body?: never;
    path: {
        /**
         * Proxy ID
         */
        id: string;
    };
    query?: never;
    url: '/proxies/{id}';
};

export type DeleteProxiesByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type DeleteProxiesByIdError = DeleteProxiesByIdErrors[keyof DeleteProxiesByIdErrors];

export type DeleteProxiesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type DeleteProxiesByIdResponse = DeleteProxiesByIdResponses[keyof DeleteProxiesByIdResponses];

export type GetProxiesByIdData = {
    body?: never;
    path: {
        /**
         * Proxy ID
         */
        id: string;
    };
    query?: never;
    url: '/proxies/{id}';
};

export type GetProxiesByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetProxiesByIdError = GetProxiesByIdErrors[keyof GetProxiesByIdErrors];

export type GetProxiesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseProxyModel;
};

export type GetProxiesByIdResponse = GetProxiesByIdResponses[keyof GetProxiesByIdResponses];

export type PatchProxiesByIdData = {
    /**
     * Proxy object
     */
    body: ProxyPartialUpdateDto;
    path: {
        /**
         * Proxy ID
         */
        id: string;
    };
    query?: never;
    url: '/proxies/{id}';
};

export type PatchProxiesByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PatchProxiesByIdError = PatchProxiesByIdErrors[keyof PatchProxiesByIdErrors];

export type PatchProxiesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseProxyModel;
};

export type PatchProxiesByIdResponse = PatchProxiesByIdResponses[keyof PatchProxiesByIdResponses];

export type PutProxiesByIdData = {
    /**
     * Proxy object
     */
    body: ProxyCreateUpdateDto;
    path: {
        /**
         * Proxy ID
         */
        id: string;
    };
    query?: never;
    url: '/proxies/{id}';
};

export type PutProxiesByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PutProxiesByIdError = PutProxiesByIdErrors[keyof PutProxiesByIdErrors];

export type PutProxiesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseProxyModel;
};

export type PutProxiesByIdResponse = PutProxiesByIdResponses[keyof PutProxiesByIdResponses];

export type DeleteSettingsKeyByKeyData = {
    body?: never;
    path: {
        /**
         * Setting Key
         */
        key: string;
    };
    query?: never;
    url: '/settings/key/{key}';
};

export type DeleteSettingsKeyByKeyErrors = {
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type DeleteSettingsKeyByKeyError = DeleteSettingsKeyByKeyErrors[keyof DeleteSettingsKeyByKeyErrors];

export type DeleteSettingsKeyByKeyResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type DeleteSettingsKeyByKeyResponse = DeleteSettingsKeyByKeyResponses[keyof DeleteSettingsKeyByKeyResponses];

export type GetSettingsKeyByKeyData = {
    body?: never;
    path: {
        /**
         * Setting Key
         */
        key: string;
    };
    query?: never;
    url: '/settings/key/{key}';
};

export type GetSettingsKeyByKeyErrors = {
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetSettingsKeyByKeyError = GetSettingsKeyByKeyErrors[keyof GetSettingsKeyByKeyErrors];

export type GetSettingsKeyByKeyResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseSettingModel;
};

export type GetSettingsKeyByKeyResponse = GetSettingsKeyByKeyResponses[keyof GetSettingsKeyByKeyResponses];

export type PutSettingsKeyByKeyData = {
    /**
     * Setting object
     */
    body: SettingCreateUpdateDto;
    path: {
        /**
         * Setting Key
         */
        key: string;
    };
    query?: never;
    url: '/settings/key/{key}';
};

export type PutSettingsKeyByKeyErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PutSettingsKeyByKeyError = PutSettingsKeyByKeyErrors[keyof PutSettingsKeyByKeyErrors];

export type PutSettingsKeyByKeyResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseSettingModel;
};

export type PutSettingsKeyByKeyResponse = PutSettingsKeyByKeyResponses[keyof PutSettingsKeyByKeyResponses];

export type GetStatusPagesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search query
         */
        q?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/status-pages';
};

export type GetStatusPagesErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetStatusPagesError = GetStatusPagesErrors[keyof GetStatusPagesErrors];

export type GetStatusPagesResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayStatusPageModel;
};

export type GetStatusPagesResponse = GetStatusPagesResponses[keyof GetStatusPagesResponses];

export type PostStatusPagesData = {
    /**
     * Status Page object
     */
    body: StatusPageCreateStatusPageDto;
    path?: never;
    query?: never;
    url: '/status-pages';
};

export type PostStatusPagesErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostStatusPagesError = PostStatusPagesErrors[keyof PostStatusPagesErrors];

export type PostStatusPagesResponses = {
    /**
     * Created
     */
    201: UtilsApiResponseStatusPageModel;
};

export type PostStatusPagesResponse = PostStatusPagesResponses[keyof PostStatusPagesResponses];

export type GetStatusPagesDomainByDomainData = {
    body?: never;
    path: {
        /**
         * Domain Name
         */
        domain: string;
    };
    query?: never;
    url: '/status-pages/domain/{domain}';
};

export type GetStatusPagesDomainByDomainErrors = {
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetStatusPagesDomainByDomainError = GetStatusPagesDomainByDomainErrors[keyof GetStatusPagesDomainByDomainErrors];

export type GetStatusPagesDomainByDomainResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseStatusPageModel;
};

export type GetStatusPagesDomainByDomainResponse = GetStatusPagesDomainByDomainResponses[keyof GetStatusPagesDomainByDomainResponses];

export type GetStatusPagesSlugBySlugData = {
    body?: never;
    path: {
        /**
         * Status Page Slug
         */
        slug: string;
    };
    query?: never;
    url: '/status-pages/slug/{slug}';
};

export type GetStatusPagesSlugBySlugErrors = {
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetStatusPagesSlugBySlugError = GetStatusPagesSlugBySlugErrors[keyof GetStatusPagesSlugBySlugErrors];

export type GetStatusPagesSlugBySlugResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseStatusPageModel;
};

export type GetStatusPagesSlugBySlugResponse = GetStatusPagesSlugBySlugResponses[keyof GetStatusPagesSlugBySlugResponses];

export type GetStatusPagesSlugBySlugMonitorsData = {
    body?: never;
    path: {
        /**
         * Status Page Slug
         */
        slug: string;
    };
    query?: never;
    url: '/status-pages/slug/{slug}/monitors';
};

export type GetStatusPagesSlugBySlugMonitorsErrors = {
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetStatusPagesSlugBySlugMonitorsError = GetStatusPagesSlugBySlugMonitorsErrors[keyof GetStatusPagesSlugBySlugMonitorsErrors];

export type GetStatusPagesSlugBySlugMonitorsResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayStatusPageMonitorWithHeartbeatsAndUptimeDto;
};

export type GetStatusPagesSlugBySlugMonitorsResponse = GetStatusPagesSlugBySlugMonitorsResponses[keyof GetStatusPagesSlugBySlugMonitorsResponses];

export type GetStatusPagesSlugBySlugMonitorsHomepageData = {
    body?: never;
    path: {
        /**
         * Status Page Slug
         */
        slug: string;
    };
    query?: never;
    url: '/status-pages/slug/{slug}/monitors/homepage';
};

export type GetStatusPagesSlugBySlugMonitorsHomepageErrors = {
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetStatusPagesSlugBySlugMonitorsHomepageError = GetStatusPagesSlugBySlugMonitorsHomepageErrors[keyof GetStatusPagesSlugBySlugMonitorsHomepageErrors];

export type GetStatusPagesSlugBySlugMonitorsHomepageResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayStatusPageMonitorWithHeartbeatsAndUptimeDto;
};

export type GetStatusPagesSlugBySlugMonitorsHomepageResponse = GetStatusPagesSlugBySlugMonitorsHomepageResponses[keyof GetStatusPagesSlugBySlugMonitorsHomepageResponses];

export type DeleteStatusPagesByIdData = {
    body?: never;
    path: {
        /**
         * Status Page ID
         */
        id: string;
    };
    query?: never;
    url: '/status-pages/{id}';
};

export type DeleteStatusPagesByIdErrors = {
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type DeleteStatusPagesByIdError = DeleteStatusPagesByIdErrors[keyof DeleteStatusPagesByIdErrors];

export type DeleteStatusPagesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type DeleteStatusPagesByIdResponse = DeleteStatusPagesByIdResponses[keyof DeleteStatusPagesByIdResponses];

export type GetStatusPagesByIdData = {
    body?: never;
    path: {
        /**
         * Status Page ID
         */
        id: string;
    };
    query?: never;
    url: '/status-pages/{id}';
};

export type GetStatusPagesByIdErrors = {
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetStatusPagesByIdError = GetStatusPagesByIdErrors[keyof GetStatusPagesByIdErrors];

export type GetStatusPagesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseStatusPageStatusPageWithMonitorsResponseDto;
};

export type GetStatusPagesByIdResponse = GetStatusPagesByIdResponses[keyof GetStatusPagesByIdResponses];

export type PatchStatusPagesByIdData = {
    /**
     * Status Page object
     */
    body: StatusPageUpdateStatusPageDto;
    path: {
        /**
         * Status Page ID
         */
        id: string;
    };
    query?: never;
    url: '/status-pages/{id}';
};

export type PatchStatusPagesByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PatchStatusPagesByIdError = PatchStatusPagesByIdErrors[keyof PatchStatusPagesByIdErrors];

export type PatchStatusPagesByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseStatusPageModel;
};

export type PatchStatusPagesByIdResponse = PatchStatusPagesByIdResponses[keyof PatchStatusPagesByIdResponses];

export type GetTagsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search query
         */
        q?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/tags';
};

export type GetTagsErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetTagsError = GetTagsErrors[keyof GetTagsErrors];

export type GetTagsResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseArrayTagModel;
};

export type GetTagsResponse = GetTagsResponses[keyof GetTagsResponses];

export type PostTagsData = {
    /**
     * Tag object
     */
    body: TagCreateUpdateDto;
    path?: never;
    query?: never;
    url: '/tags';
};

export type PostTagsErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PostTagsError = PostTagsErrors[keyof PostTagsErrors];

export type PostTagsResponses = {
    /**
     * Created
     */
    201: UtilsApiResponseTagModel;
};

export type PostTagsResponse = PostTagsResponses[keyof PostTagsResponses];

export type DeleteTagsByIdData = {
    body?: never;
    path: {
        /**
         * Tag ID
         */
        id: string;
    };
    query?: never;
    url: '/tags/{id}';
};

export type DeleteTagsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type DeleteTagsByIdError = DeleteTagsByIdErrors[keyof DeleteTagsByIdErrors];

export type DeleteTagsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseAny;
};

export type DeleteTagsByIdResponse = DeleteTagsByIdResponses[keyof DeleteTagsByIdResponses];

export type GetTagsByIdData = {
    body?: never;
    path: {
        /**
         * Tag ID
         */
        id: string;
    };
    query?: never;
    url: '/tags/{id}';
};

export type GetTagsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type GetTagsByIdError = GetTagsByIdErrors[keyof GetTagsByIdErrors];

export type GetTagsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseTagModel;
};

export type GetTagsByIdResponse = GetTagsByIdResponses[keyof GetTagsByIdResponses];

export type PatchTagsByIdData = {
    /**
     * Tag object
     */
    body: TagPartialUpdateDto;
    path: {
        /**
         * Tag ID
         */
        id: string;
    };
    query?: never;
    url: '/tags/{id}';
};

export type PatchTagsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PatchTagsByIdError = PatchTagsByIdErrors[keyof PatchTagsByIdErrors];

export type PatchTagsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseTagModel;
};

export type PatchTagsByIdResponse = PatchTagsByIdResponses[keyof PatchTagsByIdResponses];

export type PutTagsByIdData = {
    /**
     * Tag object
     */
    body: TagCreateUpdateDto;
    path: {
        /**
         * Tag ID
         */
        id: string;
    };
    query?: never;
    url: '/tags/{id}';
};

export type PutTagsByIdErrors = {
    /**
     * Bad Request
     */
    400: UtilsApiError;
    /**
     * Not Found
     */
    404: UtilsApiError;
    /**
     * Internal Server Error
     */
    500: UtilsApiError;
};

export type PutTagsByIdError = PutTagsByIdErrors[keyof PutTagsByIdErrors];

export type PutTagsByIdResponses = {
    /**
     * OK
     */
    200: UtilsApiResponseTagModel;
};

export type PutTagsByIdResponse = PutTagsByIdResponses[keyof PutTagsByIdResponses];

export type GetVersionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/version';
};

export type GetVersionResponses = {
    /**
     * {"version": "1.2.3"}
     */
    200: {
        [key: string]: string;
    };
};

export type GetVersionResponse = GetVersionResponses[keyof GetVersionResponses];

export type ClientOptions = {
    baseURL: `${string}://${string}/api/v1` | (string & {});
};