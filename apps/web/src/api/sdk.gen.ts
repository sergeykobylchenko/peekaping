// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { PostAuth2FaDisableData, PostAuth2FaDisableResponses, PostAuth2FaDisableErrors, PostAuth2FaSetupData, PostAuth2FaSetupResponses, PostAuth2FaSetupErrors, PostAuth2FaVerifyData, PostAuth2FaVerifyResponses, PostAuth2FaVerifyErrors, PostAuthLoginData, PostAuthLoginResponses, PostAuthLoginErrors, PutAuthPasswordData, PutAuthPasswordResponses, PutAuthPasswordErrors, PostAuthRefreshData, PostAuthRefreshResponses, PostAuthRefreshErrors, PostAuthRegisterData, PostAuthRegisterResponses, PostAuthRegisterErrors, GetHealthData, GetHealthResponses, GetMaintenancesData, GetMaintenancesResponses, GetMaintenancesErrors, PostMaintenancesData, PostMaintenancesResponses, PostMaintenancesErrors, DeleteMaintenancesByIdData, DeleteMaintenancesByIdResponses, DeleteMaintenancesByIdErrors, GetMaintenancesByIdData, GetMaintenancesByIdResponses, GetMaintenancesByIdErrors, PatchMaintenancesByIdData, PatchMaintenancesByIdResponses, PatchMaintenancesByIdErrors, PutMaintenancesByIdData, PutMaintenancesByIdResponses, PutMaintenancesByIdErrors, PatchMaintenancesByIdPauseData, PatchMaintenancesByIdPauseResponses, PatchMaintenancesByIdPauseErrors, PatchMaintenancesByIdResumeData, PatchMaintenancesByIdResumeResponses, PatchMaintenancesByIdResumeErrors, GetMonitorsData, GetMonitorsResponses, GetMonitorsErrors, PostMonitorsData, PostMonitorsResponses, PostMonitorsErrors, GetMonitorsBatchData, GetMonitorsBatchResponses, GetMonitorsBatchErrors, DeleteMonitorsByIdData, DeleteMonitorsByIdResponses, DeleteMonitorsByIdErrors, GetMonitorsByIdData, GetMonitorsByIdResponses, GetMonitorsByIdErrors, PatchMonitorsByIdData, PatchMonitorsByIdResponses, PatchMonitorsByIdErrors, PutMonitorsByIdData, PutMonitorsByIdResponses, PutMonitorsByIdErrors, GetMonitorsByIdHeartbeatsData, GetMonitorsByIdHeartbeatsResponses, GetMonitorsByIdHeartbeatsErrors, PostMonitorsByIdResetData, PostMonitorsByIdResetResponses, PostMonitorsByIdResetErrors, GetMonitorsByIdStatsPointsData, GetMonitorsByIdStatsPointsResponses, GetMonitorsByIdStatsPointsErrors, GetMonitorsByIdStatsUptimeData, GetMonitorsByIdStatsUptimeResponses, GetMonitorsByIdStatsUptimeErrors, GetNotificationChannelsData, GetNotificationChannelsResponses, GetNotificationChannelsErrors, PostNotificationChannelsData, PostNotificationChannelsResponses, PostNotificationChannelsErrors, PostNotificationChannelsTestData, PostNotificationChannelsTestResponses, PostNotificationChannelsTestErrors, DeleteNotificationChannelsByIdData, DeleteNotificationChannelsByIdResponses, DeleteNotificationChannelsByIdErrors, GetNotificationChannelsByIdData, GetNotificationChannelsByIdResponses, GetNotificationChannelsByIdErrors, PatchNotificationChannelsByIdData, PatchNotificationChannelsByIdResponses, PatchNotificationChannelsByIdErrors, PutNotificationChannelsByIdData, PutNotificationChannelsByIdResponses, PutNotificationChannelsByIdErrors, GetProxiesData, GetProxiesResponses, GetProxiesErrors, PostProxiesData, PostProxiesResponses, PostProxiesErrors, DeleteProxiesByIdData, DeleteProxiesByIdResponses, DeleteProxiesByIdErrors, GetProxiesByIdData, GetProxiesByIdResponses, GetProxiesByIdErrors, PatchProxiesByIdData, PatchProxiesByIdResponses, PatchProxiesByIdErrors, PutProxiesByIdData, PutProxiesByIdResponses, PutProxiesByIdErrors, DeleteSettingsKeyByKeyData, DeleteSettingsKeyByKeyResponses, DeleteSettingsKeyByKeyErrors, GetSettingsKeyByKeyData, GetSettingsKeyByKeyResponses, GetSettingsKeyByKeyErrors, PutSettingsKeyByKeyData, PutSettingsKeyByKeyResponses, PutSettingsKeyByKeyErrors, GetStatusPagesData, GetStatusPagesResponses, GetStatusPagesErrors, PostStatusPagesData, PostStatusPagesResponses, PostStatusPagesErrors, GetStatusPagesDomainByDomainData, GetStatusPagesDomainByDomainResponses, GetStatusPagesDomainByDomainErrors, GetStatusPagesSlugBySlugData, GetStatusPagesSlugBySlugResponses, GetStatusPagesSlugBySlugErrors, GetStatusPagesSlugBySlugMonitorsData, GetStatusPagesSlugBySlugMonitorsResponses, GetStatusPagesSlugBySlugMonitorsErrors, GetStatusPagesSlugBySlugMonitorsHomepageData, GetStatusPagesSlugBySlugMonitorsHomepageResponses, GetStatusPagesSlugBySlugMonitorsHomepageErrors, DeleteStatusPagesByIdData, DeleteStatusPagesByIdResponses, DeleteStatusPagesByIdErrors, GetStatusPagesByIdData, GetStatusPagesByIdResponses, GetStatusPagesByIdErrors, PatchStatusPagesByIdData, PatchStatusPagesByIdResponses, PatchStatusPagesByIdErrors, GetTagsData, GetTagsResponses, GetTagsErrors, PostTagsData, PostTagsResponses, PostTagsErrors, DeleteTagsByIdData, DeleteTagsByIdResponses, DeleteTagsByIdErrors, GetTagsByIdData, GetTagsByIdResponses, GetTagsByIdErrors, PatchTagsByIdData, PatchTagsByIdResponses, PatchTagsByIdErrors, PutTagsByIdData, PutTagsByIdResponses, PutTagsByIdErrors, GetVersionData, GetVersionResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Disable 2FA (TOTP) for user
 */
export const postAuth2FaDisable = <ThrowOnError extends boolean = false>(options: Options<PostAuth2FaDisableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuth2FaDisableResponses, PostAuth2FaDisableErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/2fa/disable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Enable 2FA (TOTP) for user
 */
export const postAuth2FaSetup = <ThrowOnError extends boolean = false>(options: Options<PostAuth2FaSetupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuth2FaSetupResponses, PostAuth2FaSetupErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/2fa/setup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify 2FA (TOTP) code for user
 */
export const postAuth2FaVerify = <ThrowOnError extends boolean = false>(options: Options<PostAuth2FaVerifyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuth2FaVerifyResponses, PostAuth2FaVerifyErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/2fa/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login admin
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthLoginResponses, PostAuthLoginErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user password
 */
export const putAuthPassword = <ThrowOnError extends boolean = false>(options: Options<PutAuthPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAuthPasswordResponses, PutAuthPasswordErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh access token
 */
export const postAuthRefresh = <ThrowOnError extends boolean = false>(options: Options<PostAuthRefreshData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthRefreshResponses, PostAuthRefreshErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register new admin
 */
export const postAuthRegister = <ThrowOnError extends boolean = false>(options: Options<PostAuthRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthRegisterResponses, PostAuthRegisterErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get server health
 * Returns the current server health
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};

/**
 * Get maintenances
 */
export const getMaintenances = <ThrowOnError extends boolean = false>(options?: Options<GetMaintenancesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMaintenancesResponses, GetMaintenancesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/maintenances',
        ...options
    });
};

/**
 * Create maintenance
 */
export const postMaintenances = <ThrowOnError extends boolean = false>(options: Options<PostMaintenancesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMaintenancesResponses, PostMaintenancesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/maintenances',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete maintenance
 */
export const deleteMaintenancesById = <ThrowOnError extends boolean = false>(options: Options<DeleteMaintenancesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMaintenancesByIdResponses, DeleteMaintenancesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/maintenances/{id}',
        ...options
    });
};

/**
 * Get maintenance by ID
 */
export const getMaintenancesById = <ThrowOnError extends boolean = false>(options: Options<GetMaintenancesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMaintenancesByIdResponses, GetMaintenancesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/maintenances/{id}',
        ...options
    });
};

/**
 * Update maintenance
 */
export const patchMaintenancesById = <ThrowOnError extends boolean = false>(options: Options<PatchMaintenancesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchMaintenancesByIdResponses, PatchMaintenancesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/maintenances/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update maintenance
 */
export const putMaintenancesById = <ThrowOnError extends boolean = false>(options: Options<PutMaintenancesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMaintenancesByIdResponses, PutMaintenancesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/maintenances/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Pause maintenance
 */
export const patchMaintenancesByIdPause = <ThrowOnError extends boolean = false>(options: Options<PatchMaintenancesByIdPauseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchMaintenancesByIdPauseResponses, PatchMaintenancesByIdPauseErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/maintenances/{id}/pause',
        ...options
    });
};

/**
 * Resume maintenance
 */
export const patchMaintenancesByIdResume = <ThrowOnError extends boolean = false>(options: Options<PatchMaintenancesByIdResumeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchMaintenancesByIdResumeResponses, PatchMaintenancesByIdResumeErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/maintenances/{id}/resume',
        ...options
    });
};

/**
 * Get monitors
 */
export const getMonitors = <ThrowOnError extends boolean = false>(options?: Options<GetMonitorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMonitorsResponses, GetMonitorsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors',
        ...options
    });
};

/**
 * Create monitor
 */
export const postMonitors = <ThrowOnError extends boolean = false>(options: Options<PostMonitorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMonitorsResponses, PostMonitorsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get monitors by IDs
 */
export const getMonitorsBatch = <ThrowOnError extends boolean = false>(options: Options<GetMonitorsBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMonitorsBatchResponses, GetMonitorsBatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors/batch',
        ...options
    });
};

/**
 * Delete monitor
 */
export const deleteMonitorsById = <ThrowOnError extends boolean = false>(options: Options<DeleteMonitorsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMonitorsByIdResponses, DeleteMonitorsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors/{id}',
        ...options
    });
};

/**
 * Get monitor by ID
 */
export const getMonitorsById = <ThrowOnError extends boolean = false>(options: Options<GetMonitorsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMonitorsByIdResponses, GetMonitorsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors/{id}',
        ...options
    });
};

/**
 * Update monitor
 */
export const patchMonitorsById = <ThrowOnError extends boolean = false>(options: Options<PatchMonitorsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchMonitorsByIdResponses, PatchMonitorsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update monitor
 */
export const putMonitorsById = <ThrowOnError extends boolean = false>(options: Options<PutMonitorsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMonitorsByIdResponses, PutMonitorsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get paginated heartbeats for a monitor
 */
export const getMonitorsByIdHeartbeats = <ThrowOnError extends boolean = false>(options: Options<GetMonitorsByIdHeartbeatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMonitorsByIdHeartbeatsResponses, GetMonitorsByIdHeartbeatsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors/{id}/heartbeats',
        ...options
    });
};

/**
 * Reset monitor data (heartbeats and stats)
 */
export const postMonitorsByIdReset = <ThrowOnError extends boolean = false>(options: Options<PostMonitorsByIdResetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMonitorsByIdResetResponses, PostMonitorsByIdResetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors/{id}/reset',
        ...options
    });
};

/**
 * Get monitor stat points (ping/up/down) from stats tables
 */
export const getMonitorsByIdStatsPoints = <ThrowOnError extends boolean = false>(options: Options<GetMonitorsByIdStatsPointsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMonitorsByIdStatsPointsResponses, GetMonitorsByIdStatsPointsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors/{id}/stats/points',
        ...options
    });
};

/**
 * Get monitor uptime stats (24h, 30d, 365d)
 */
export const getMonitorsByIdStatsUptime = <ThrowOnError extends boolean = false>(options: Options<GetMonitorsByIdStatsUptimeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMonitorsByIdStatsUptimeResponses, GetMonitorsByIdStatsUptimeErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/monitors/{id}/stats/uptime',
        ...options
    });
};

/**
 * Get notification channels
 */
export const getNotificationChannels = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationChannelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationChannelsResponses, GetNotificationChannelsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/notification-channels',
        ...options
    });
};

/**
 * Create notification channel
 */
export const postNotificationChannels = <ThrowOnError extends boolean = false>(options: Options<PostNotificationChannelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNotificationChannelsResponses, PostNotificationChannelsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/notification-channels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Test notification channel
 */
export const postNotificationChannelsTest = <ThrowOnError extends boolean = false>(options: Options<PostNotificationChannelsTestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNotificationChannelsTestResponses, PostNotificationChannelsTestErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/notification-channels/test',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete notification channel
 */
export const deleteNotificationChannelsById = <ThrowOnError extends boolean = false>(options: Options<DeleteNotificationChannelsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNotificationChannelsByIdResponses, DeleteNotificationChannelsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/notification-channels/{id}',
        ...options
    });
};

/**
 * Get notification channel by ID
 */
export const getNotificationChannelsById = <ThrowOnError extends boolean = false>(options: Options<GetNotificationChannelsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationChannelsByIdResponses, GetNotificationChannelsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/notification-channels/{id}',
        ...options
    });
};

/**
 * Update notification channel
 */
export const patchNotificationChannelsById = <ThrowOnError extends boolean = false>(options: Options<PatchNotificationChannelsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchNotificationChannelsByIdResponses, PatchNotificationChannelsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/notification-channels/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update notification channel
 */
export const putNotificationChannelsById = <ThrowOnError extends boolean = false>(options: Options<PutNotificationChannelsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutNotificationChannelsByIdResponses, PutNotificationChannelsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/notification-channels/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get proxies
 */
export const getProxies = <ThrowOnError extends boolean = false>(options?: Options<GetProxiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProxiesResponses, GetProxiesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/proxies',
        ...options
    });
};

/**
 * Create proxy
 */
export const postProxies = <ThrowOnError extends boolean = false>(options: Options<PostProxiesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProxiesResponses, PostProxiesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/proxies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete proxy
 */
export const deleteProxiesById = <ThrowOnError extends boolean = false>(options: Options<DeleteProxiesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProxiesByIdResponses, DeleteProxiesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/proxies/{id}',
        ...options
    });
};

/**
 * Get proxy by ID
 */
export const getProxiesById = <ThrowOnError extends boolean = false>(options: Options<GetProxiesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProxiesByIdResponses, GetProxiesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/proxies/{id}',
        ...options
    });
};

/**
 * Update proxy
 */
export const patchProxiesById = <ThrowOnError extends boolean = false>(options: Options<PatchProxiesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchProxiesByIdResponses, PatchProxiesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/proxies/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update proxy
 */
export const putProxiesById = <ThrowOnError extends boolean = false>(options: Options<PutProxiesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutProxiesByIdResponses, PutProxiesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/proxies/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete setting by key
 */
export const deleteSettingsKeyByKey = <ThrowOnError extends boolean = false>(options: Options<DeleteSettingsKeyByKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSettingsKeyByKeyResponses, DeleteSettingsKeyByKeyErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/settings/key/{key}',
        ...options
    });
};

/**
 * Get setting by key
 */
export const getSettingsKeyByKey = <ThrowOnError extends boolean = false>(options: Options<GetSettingsKeyByKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSettingsKeyByKeyResponses, GetSettingsKeyByKeyErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/settings/key/{key}',
        ...options
    });
};

/**
 * Set setting by key
 */
export const putSettingsKeyByKey = <ThrowOnError extends boolean = false>(options: Options<PutSettingsKeyByKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutSettingsKeyByKeyResponses, PutSettingsKeyByKeyErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/settings/key/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all status pages
 */
export const getStatusPages = <ThrowOnError extends boolean = false>(options?: Options<GetStatusPagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStatusPagesResponses, GetStatusPagesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/status-pages',
        ...options
    });
};

/**
 * Create a new status page
 */
export const postStatusPages = <ThrowOnError extends boolean = false>(options: Options<PostStatusPagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostStatusPagesResponses, PostStatusPagesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/status-pages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a status page by domain name
 */
export const getStatusPagesDomainByDomain = <ThrowOnError extends boolean = false>(options: Options<GetStatusPagesDomainByDomainData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStatusPagesDomainByDomainResponses, GetStatusPagesDomainByDomainErrors, ThrowOnError>({
        responseType: 'json',
        url: '/status-pages/domain/{domain}',
        ...options
    });
};

/**
 * Get a status page by slug
 */
export const getStatusPagesSlugBySlug = <ThrowOnError extends boolean = false>(options: Options<GetStatusPagesSlugBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStatusPagesSlugBySlugResponses, GetStatusPagesSlugBySlugErrors, ThrowOnError>({
        responseType: 'json',
        url: '/status-pages/slug/{slug}',
        ...options
    });
};

/**
 * Get monitors for a status page by slug with heartbeats and uptime
 */
export const getStatusPagesSlugBySlugMonitors = <ThrowOnError extends boolean = false>(options: Options<GetStatusPagesSlugBySlugMonitorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStatusPagesSlugBySlugMonitorsResponses, GetStatusPagesSlugBySlugMonitorsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/status-pages/slug/{slug}/monitors',
        ...options
    });
};

/**
 * Get monitors for a status page by slug for homepage
 */
export const getStatusPagesSlugBySlugMonitorsHomepage = <ThrowOnError extends boolean = false>(options: Options<GetStatusPagesSlugBySlugMonitorsHomepageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStatusPagesSlugBySlugMonitorsHomepageResponses, GetStatusPagesSlugBySlugMonitorsHomepageErrors, ThrowOnError>({
        responseType: 'json',
        url: '/status-pages/slug/{slug}/monitors/homepage',
        ...options
    });
};

/**
 * Delete a status page
 */
export const deleteStatusPagesById = <ThrowOnError extends boolean = false>(options: Options<DeleteStatusPagesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteStatusPagesByIdResponses, DeleteStatusPagesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/status-pages/{id}',
        ...options
    });
};

/**
 * Get a status page by ID
 */
export const getStatusPagesById = <ThrowOnError extends boolean = false>(options: Options<GetStatusPagesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStatusPagesByIdResponses, GetStatusPagesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/status-pages/{id}',
        ...options
    });
};

/**
 * Update a status page
 */
export const patchStatusPagesById = <ThrowOnError extends boolean = false>(options: Options<PatchStatusPagesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchStatusPagesByIdResponses, PatchStatusPagesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/status-pages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get tags
 */
export const getTags = <ThrowOnError extends boolean = false>(options?: Options<GetTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagsResponses, GetTagsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/tags',
        ...options
    });
};

/**
 * Create tag
 */
export const postTags = <ThrowOnError extends boolean = false>(options: Options<PostTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTagsResponses, PostTagsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete tag
 */
export const deleteTagsById = <ThrowOnError extends boolean = false>(options: Options<DeleteTagsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagsByIdResponses, DeleteTagsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options
    });
};

/**
 * Get tag by ID
 */
export const getTagsById = <ThrowOnError extends boolean = false>(options: Options<GetTagsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagsByIdResponses, GetTagsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options
    });
};

/**
 * Update tag
 */
export const patchTagsById = <ThrowOnError extends boolean = false>(options: Options<PatchTagsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchTagsByIdResponses, PatchTagsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update tag
 */
export const putTagsById = <ThrowOnError extends boolean = false>(options: Options<PutTagsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTagsByIdResponses, PutTagsByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get server version
 * Returns the current server version
 */
export const getVersion = <ThrowOnError extends boolean = false>(options?: Options<GetVersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVersionResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/version',
        ...options
    });
};