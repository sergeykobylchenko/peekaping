// This file is auto-generated by @hey-api/openapi-ts

import { type Options, postAuth2FaDisable, postAuth2FaSetup, postAuth2FaVerify, postAuthLogin, putAuthPassword, postAuthRefresh, postAuthRegister, getHealth, getMaintenances, postMaintenances, deleteMaintenancesById, getMaintenancesById, patchMaintenancesById, putMaintenancesById, patchMaintenancesByIdPause, patchMaintenancesByIdResume, getMonitors, postMonitors, getMonitorsBatch, deleteMonitorsById, getMonitorsById, patchMonitorsById, putMonitorsById, getMonitorsByIdHeartbeats, postMonitorsByIdReset, getMonitorsByIdStatsPoints, getMonitorsByIdStatsUptime, getNotificationChannels, postNotificationChannels, postNotificationChannelsTest, deleteNotificationChannelsById, getNotificationChannelsById, patchNotificationChannelsById, putNotificationChannelsById, getProxies, postProxies, deleteProxiesById, getProxiesById, patchProxiesById, putProxiesById, deleteSettingsKeyByKey, getSettingsKeyByKey, putSettingsKeyByKey, getStatusPages, postStatusPages, getStatusPagesDomainByDomain, getStatusPagesSlugBySlug, getStatusPagesSlugBySlugMonitors, getStatusPagesSlugBySlugMonitorsHomepage, deleteStatusPagesById, getStatusPagesById, patchStatusPagesById, getTags, postTags, deleteTagsById, getTagsById, patchTagsById, putTagsById, getVersion } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { PostAuth2FaDisableData, PostAuth2FaDisableError, PostAuth2FaDisableResponse, PostAuth2FaSetupData, PostAuth2FaSetupError, PostAuth2FaSetupResponse, PostAuth2FaVerifyData, PostAuth2FaVerifyError, PostAuth2FaVerifyResponse, PostAuthLoginData, PostAuthLoginError, PostAuthLoginResponse, PutAuthPasswordData, PutAuthPasswordError, PutAuthPasswordResponse, PostAuthRefreshData, PostAuthRefreshError, PostAuthRefreshResponse, PostAuthRegisterData, PostAuthRegisterError, PostAuthRegisterResponse, GetHealthData, GetMaintenancesData, GetMaintenancesError, GetMaintenancesResponse, PostMaintenancesData, PostMaintenancesError, PostMaintenancesResponse, DeleteMaintenancesByIdData, DeleteMaintenancesByIdError, DeleteMaintenancesByIdResponse, GetMaintenancesByIdData, PatchMaintenancesByIdData, PatchMaintenancesByIdError, PatchMaintenancesByIdResponse, PutMaintenancesByIdData, PutMaintenancesByIdError, PutMaintenancesByIdResponse, PatchMaintenancesByIdPauseData, PatchMaintenancesByIdPauseError, PatchMaintenancesByIdPauseResponse, PatchMaintenancesByIdResumeData, PatchMaintenancesByIdResumeError, PatchMaintenancesByIdResumeResponse, GetMonitorsData, GetMonitorsError, GetMonitorsResponse, PostMonitorsData, PostMonitorsError, PostMonitorsResponse, GetMonitorsBatchData, DeleteMonitorsByIdData, DeleteMonitorsByIdError, DeleteMonitorsByIdResponse, GetMonitorsByIdData, PatchMonitorsByIdData, PatchMonitorsByIdError, PatchMonitorsByIdResponse, PutMonitorsByIdData, PutMonitorsByIdError, PutMonitorsByIdResponse, GetMonitorsByIdHeartbeatsData, GetMonitorsByIdHeartbeatsError, GetMonitorsByIdHeartbeatsResponse, PostMonitorsByIdResetData, PostMonitorsByIdResetError, PostMonitorsByIdResetResponse, GetMonitorsByIdStatsPointsData, GetMonitorsByIdStatsUptimeData, GetNotificationChannelsData, GetNotificationChannelsError, GetNotificationChannelsResponse, PostNotificationChannelsData, PostNotificationChannelsError, PostNotificationChannelsResponse, PostNotificationChannelsTestData, PostNotificationChannelsTestError, PostNotificationChannelsTestResponse, DeleteNotificationChannelsByIdData, DeleteNotificationChannelsByIdError, DeleteNotificationChannelsByIdResponse, GetNotificationChannelsByIdData, PatchNotificationChannelsByIdData, PatchNotificationChannelsByIdError, PatchNotificationChannelsByIdResponse, PutNotificationChannelsByIdData, PutNotificationChannelsByIdError, PutNotificationChannelsByIdResponse, GetProxiesData, GetProxiesError, GetProxiesResponse, PostProxiesData, PostProxiesError, PostProxiesResponse, DeleteProxiesByIdData, DeleteProxiesByIdError, DeleteProxiesByIdResponse, GetProxiesByIdData, PatchProxiesByIdData, PatchProxiesByIdError, PatchProxiesByIdResponse, PutProxiesByIdData, PutProxiesByIdError, PutProxiesByIdResponse, DeleteSettingsKeyByKeyData, DeleteSettingsKeyByKeyError, DeleteSettingsKeyByKeyResponse, GetSettingsKeyByKeyData, PutSettingsKeyByKeyData, PutSettingsKeyByKeyError, PutSettingsKeyByKeyResponse, GetStatusPagesData, GetStatusPagesError, GetStatusPagesResponse, PostStatusPagesData, PostStatusPagesError, PostStatusPagesResponse, GetStatusPagesDomainByDomainData, GetStatusPagesSlugBySlugData, GetStatusPagesSlugBySlugMonitorsData, GetStatusPagesSlugBySlugMonitorsHomepageData, DeleteStatusPagesByIdData, DeleteStatusPagesByIdError, DeleteStatusPagesByIdResponse, GetStatusPagesByIdData, PatchStatusPagesByIdData, PatchStatusPagesByIdError, PatchStatusPagesByIdResponse, GetTagsData, GetTagsError, GetTagsResponse, PostTagsData, PostTagsError, PostTagsResponse, DeleteTagsByIdData, DeleteTagsByIdError, DeleteTagsByIdResponse, GetTagsByIdData, PatchTagsByIdData, PatchTagsByIdError, PatchTagsByIdResponse, PutTagsByIdData, PutTagsByIdError, PutTagsByIdResponse, GetVersionData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const postAuth2FaDisableQueryKey = (options: Options<PostAuth2FaDisableData>) => createQueryKey('postAuth2FaDisable', options);

/**
 * Disable 2FA (TOTP) for user
 */
export const postAuth2FaDisableOptions = (options: Options<PostAuth2FaDisableData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuth2FaDisable({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuth2FaDisableQueryKey(options)
    });
};

/**
 * Disable 2FA (TOTP) for user
 */
export const postAuth2FaDisableMutation = (options?: Partial<Options<PostAuth2FaDisableData>>): UseMutationOptions<PostAuth2FaDisableResponse, AxiosError<PostAuth2FaDisableError>, Options<PostAuth2FaDisableData>> => {
    const mutationOptions: UseMutationOptions<PostAuth2FaDisableResponse, AxiosError<PostAuth2FaDisableError>, Options<PostAuth2FaDisableData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuth2FaDisable({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuth2FaSetupQueryKey = (options: Options<PostAuth2FaSetupData>) => createQueryKey('postAuth2FaSetup', options);

/**
 * Enable 2FA (TOTP) for user
 */
export const postAuth2FaSetupOptions = (options: Options<PostAuth2FaSetupData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuth2FaSetup({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuth2FaSetupQueryKey(options)
    });
};

/**
 * Enable 2FA (TOTP) for user
 */
export const postAuth2FaSetupMutation = (options?: Partial<Options<PostAuth2FaSetupData>>): UseMutationOptions<PostAuth2FaSetupResponse, AxiosError<PostAuth2FaSetupError>, Options<PostAuth2FaSetupData>> => {
    const mutationOptions: UseMutationOptions<PostAuth2FaSetupResponse, AxiosError<PostAuth2FaSetupError>, Options<PostAuth2FaSetupData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuth2FaSetup({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuth2FaVerifyQueryKey = (options: Options<PostAuth2FaVerifyData>) => createQueryKey('postAuth2FaVerify', options);

/**
 * Verify 2FA (TOTP) code for user
 */
export const postAuth2FaVerifyOptions = (options: Options<PostAuth2FaVerifyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuth2FaVerify({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuth2FaVerifyQueryKey(options)
    });
};

/**
 * Verify 2FA (TOTP) code for user
 */
export const postAuth2FaVerifyMutation = (options?: Partial<Options<PostAuth2FaVerifyData>>): UseMutationOptions<PostAuth2FaVerifyResponse, AxiosError<PostAuth2FaVerifyError>, Options<PostAuth2FaVerifyData>> => {
    const mutationOptions: UseMutationOptions<PostAuth2FaVerifyResponse, AxiosError<PostAuth2FaVerifyError>, Options<PostAuth2FaVerifyData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuth2FaVerify({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthLoginQueryKey = (options: Options<PostAuthLoginData>) => createQueryKey('postAuthLogin', options);

/**
 * Login admin
 */
export const postAuthLoginOptions = (options: Options<PostAuthLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthLoginQueryKey(options)
    });
};

/**
 * Login admin
 */
export const postAuthLoginMutation = (options?: Partial<Options<PostAuthLoginData>>): UseMutationOptions<PostAuthLoginResponse, AxiosError<PostAuthLoginError>, Options<PostAuthLoginData>> => {
    const mutationOptions: UseMutationOptions<PostAuthLoginResponse, AxiosError<PostAuthLoginError>, Options<PostAuthLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update user password
 */
export const putAuthPasswordMutation = (options?: Partial<Options<PutAuthPasswordData>>): UseMutationOptions<PutAuthPasswordResponse, AxiosError<PutAuthPasswordError>, Options<PutAuthPasswordData>> => {
    const mutationOptions: UseMutationOptions<PutAuthPasswordResponse, AxiosError<PutAuthPasswordError>, Options<PutAuthPasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putAuthPassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthRefreshQueryKey = (options: Options<PostAuthRefreshData>) => createQueryKey('postAuthRefresh', options);

/**
 * Refresh access token
 */
export const postAuthRefreshOptions = (options: Options<PostAuthRefreshData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthRefresh({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthRefreshQueryKey(options)
    });
};

/**
 * Refresh access token
 */
export const postAuthRefreshMutation = (options?: Partial<Options<PostAuthRefreshData>>): UseMutationOptions<PostAuthRefreshResponse, AxiosError<PostAuthRefreshError>, Options<PostAuthRefreshData>> => {
    const mutationOptions: UseMutationOptions<PostAuthRefreshResponse, AxiosError<PostAuthRefreshError>, Options<PostAuthRefreshData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthRefresh({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthRegisterQueryKey = (options: Options<PostAuthRegisterData>) => createQueryKey('postAuthRegister', options);

/**
 * Register new admin
 */
export const postAuthRegisterOptions = (options: Options<PostAuthRegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthRegisterQueryKey(options)
    });
};

/**
 * Register new admin
 */
export const postAuthRegisterMutation = (options?: Partial<Options<PostAuthRegisterData>>): UseMutationOptions<PostAuthRegisterResponse, AxiosError<PostAuthRegisterError>, Options<PostAuthRegisterData>> => {
    const mutationOptions: UseMutationOptions<PostAuthRegisterResponse, AxiosError<PostAuthRegisterError>, Options<PostAuthRegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthRegister({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getHealthQueryKey = (options?: Options<GetHealthData>) => createQueryKey('getHealth', options);

/**
 * Get server health
 * Returns the current server health
 */
export const getHealthOptions = (options?: Options<GetHealthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHealth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHealthQueryKey(options)
    });
};

export const getMaintenancesQueryKey = (options?: Options<GetMaintenancesData>) => createQueryKey('getMaintenances', options);

/**
 * Get maintenances
 */
export const getMaintenancesOptions = (options?: Options<GetMaintenancesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMaintenances({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMaintenancesQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getMaintenancesInfiniteQueryKey = (options?: Options<GetMaintenancesData>): QueryKey<Options<GetMaintenancesData>> => createQueryKey('getMaintenances', options, true);

/**
 * Get maintenances
 */
export const getMaintenancesInfiniteOptions = (options?: Options<GetMaintenancesData>) => {
    return infiniteQueryOptions<GetMaintenancesResponse, AxiosError<GetMaintenancesError>, InfiniteData<GetMaintenancesResponse>, QueryKey<Options<GetMaintenancesData>>, number | Pick<QueryKey<Options<GetMaintenancesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetMaintenancesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getMaintenances({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMaintenancesInfiniteQueryKey(options)
    });
};

export const postMaintenancesQueryKey = (options: Options<PostMaintenancesData>) => createQueryKey('postMaintenances', options);

/**
 * Create maintenance
 */
export const postMaintenancesOptions = (options: Options<PostMaintenancesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMaintenances({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMaintenancesQueryKey(options)
    });
};

/**
 * Create maintenance
 */
export const postMaintenancesMutation = (options?: Partial<Options<PostMaintenancesData>>): UseMutationOptions<PostMaintenancesResponse, AxiosError<PostMaintenancesError>, Options<PostMaintenancesData>> => {
    const mutationOptions: UseMutationOptions<PostMaintenancesResponse, AxiosError<PostMaintenancesError>, Options<PostMaintenancesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMaintenances({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete maintenance
 */
export const deleteMaintenancesByIdMutation = (options?: Partial<Options<DeleteMaintenancesByIdData>>): UseMutationOptions<DeleteMaintenancesByIdResponse, AxiosError<DeleteMaintenancesByIdError>, Options<DeleteMaintenancesByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteMaintenancesByIdResponse, AxiosError<DeleteMaintenancesByIdError>, Options<DeleteMaintenancesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteMaintenancesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMaintenancesByIdQueryKey = (options: Options<GetMaintenancesByIdData>) => createQueryKey('getMaintenancesById', options);

/**
 * Get maintenance by ID
 */
export const getMaintenancesByIdOptions = (options: Options<GetMaintenancesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMaintenancesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMaintenancesByIdQueryKey(options)
    });
};

/**
 * Update maintenance
 */
export const patchMaintenancesByIdMutation = (options?: Partial<Options<PatchMaintenancesByIdData>>): UseMutationOptions<PatchMaintenancesByIdResponse, AxiosError<PatchMaintenancesByIdError>, Options<PatchMaintenancesByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchMaintenancesByIdResponse, AxiosError<PatchMaintenancesByIdError>, Options<PatchMaintenancesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchMaintenancesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update maintenance
 */
export const putMaintenancesByIdMutation = (options?: Partial<Options<PutMaintenancesByIdData>>): UseMutationOptions<PutMaintenancesByIdResponse, AxiosError<PutMaintenancesByIdError>, Options<PutMaintenancesByIdData>> => {
    const mutationOptions: UseMutationOptions<PutMaintenancesByIdResponse, AxiosError<PutMaintenancesByIdError>, Options<PutMaintenancesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putMaintenancesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Pause maintenance
 */
export const patchMaintenancesByIdPauseMutation = (options?: Partial<Options<PatchMaintenancesByIdPauseData>>): UseMutationOptions<PatchMaintenancesByIdPauseResponse, AxiosError<PatchMaintenancesByIdPauseError>, Options<PatchMaintenancesByIdPauseData>> => {
    const mutationOptions: UseMutationOptions<PatchMaintenancesByIdPauseResponse, AxiosError<PatchMaintenancesByIdPauseError>, Options<PatchMaintenancesByIdPauseData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchMaintenancesByIdPause({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Resume maintenance
 */
export const patchMaintenancesByIdResumeMutation = (options?: Partial<Options<PatchMaintenancesByIdResumeData>>): UseMutationOptions<PatchMaintenancesByIdResumeResponse, AxiosError<PatchMaintenancesByIdResumeError>, Options<PatchMaintenancesByIdResumeData>> => {
    const mutationOptions: UseMutationOptions<PatchMaintenancesByIdResumeResponse, AxiosError<PatchMaintenancesByIdResumeError>, Options<PatchMaintenancesByIdResumeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchMaintenancesByIdResume({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMonitorsQueryKey = (options?: Options<GetMonitorsData>) => createQueryKey('getMonitors', options);

/**
 * Get monitors
 */
export const getMonitorsOptions = (options?: Options<GetMonitorsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMonitors({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMonitorsQueryKey(options)
    });
};

export const getMonitorsInfiniteQueryKey = (options?: Options<GetMonitorsData>): QueryKey<Options<GetMonitorsData>> => createQueryKey('getMonitors', options, true);

/**
 * Get monitors
 */
export const getMonitorsInfiniteOptions = (options?: Options<GetMonitorsData>) => {
    return infiniteQueryOptions<GetMonitorsResponse, AxiosError<GetMonitorsError>, InfiniteData<GetMonitorsResponse>, QueryKey<Options<GetMonitorsData>>, number | Pick<QueryKey<Options<GetMonitorsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetMonitorsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getMonitors({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMonitorsInfiniteQueryKey(options)
    });
};

export const postMonitorsQueryKey = (options: Options<PostMonitorsData>) => createQueryKey('postMonitors', options);

/**
 * Create monitor
 */
export const postMonitorsOptions = (options: Options<PostMonitorsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMonitors({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMonitorsQueryKey(options)
    });
};

/**
 * Create monitor
 */
export const postMonitorsMutation = (options?: Partial<Options<PostMonitorsData>>): UseMutationOptions<PostMonitorsResponse, AxiosError<PostMonitorsError>, Options<PostMonitorsData>> => {
    const mutationOptions: UseMutationOptions<PostMonitorsResponse, AxiosError<PostMonitorsError>, Options<PostMonitorsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMonitors({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMonitorsBatchQueryKey = (options: Options<GetMonitorsBatchData>) => createQueryKey('getMonitorsBatch', options);

/**
 * Get monitors by IDs
 */
export const getMonitorsBatchOptions = (options: Options<GetMonitorsBatchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMonitorsBatch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMonitorsBatchQueryKey(options)
    });
};

/**
 * Delete monitor
 */
export const deleteMonitorsByIdMutation = (options?: Partial<Options<DeleteMonitorsByIdData>>): UseMutationOptions<DeleteMonitorsByIdResponse, AxiosError<DeleteMonitorsByIdError>, Options<DeleteMonitorsByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteMonitorsByIdResponse, AxiosError<DeleteMonitorsByIdError>, Options<DeleteMonitorsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteMonitorsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMonitorsByIdQueryKey = (options: Options<GetMonitorsByIdData>) => createQueryKey('getMonitorsById', options);

/**
 * Get monitor by ID
 */
export const getMonitorsByIdOptions = (options: Options<GetMonitorsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMonitorsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMonitorsByIdQueryKey(options)
    });
};

/**
 * Update monitor
 */
export const patchMonitorsByIdMutation = (options?: Partial<Options<PatchMonitorsByIdData>>): UseMutationOptions<PatchMonitorsByIdResponse, AxiosError<PatchMonitorsByIdError>, Options<PatchMonitorsByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchMonitorsByIdResponse, AxiosError<PatchMonitorsByIdError>, Options<PatchMonitorsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchMonitorsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update monitor
 */
export const putMonitorsByIdMutation = (options?: Partial<Options<PutMonitorsByIdData>>): UseMutationOptions<PutMonitorsByIdResponse, AxiosError<PutMonitorsByIdError>, Options<PutMonitorsByIdData>> => {
    const mutationOptions: UseMutationOptions<PutMonitorsByIdResponse, AxiosError<PutMonitorsByIdError>, Options<PutMonitorsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putMonitorsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMonitorsByIdHeartbeatsQueryKey = (options: Options<GetMonitorsByIdHeartbeatsData>) => createQueryKey('getMonitorsByIdHeartbeats', options);

/**
 * Get paginated heartbeats for a monitor
 */
export const getMonitorsByIdHeartbeatsOptions = (options: Options<GetMonitorsByIdHeartbeatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMonitorsByIdHeartbeats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMonitorsByIdHeartbeatsQueryKey(options)
    });
};

export const getMonitorsByIdHeartbeatsInfiniteQueryKey = (options: Options<GetMonitorsByIdHeartbeatsData>): QueryKey<Options<GetMonitorsByIdHeartbeatsData>> => createQueryKey('getMonitorsByIdHeartbeats', options, true);

/**
 * Get paginated heartbeats for a monitor
 */
export const getMonitorsByIdHeartbeatsInfiniteOptions = (options: Options<GetMonitorsByIdHeartbeatsData>) => {
    return infiniteQueryOptions<GetMonitorsByIdHeartbeatsResponse, AxiosError<GetMonitorsByIdHeartbeatsError>, InfiniteData<GetMonitorsByIdHeartbeatsResponse>, QueryKey<Options<GetMonitorsByIdHeartbeatsData>>, number | Pick<QueryKey<Options<GetMonitorsByIdHeartbeatsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetMonitorsByIdHeartbeatsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getMonitorsByIdHeartbeats({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMonitorsByIdHeartbeatsInfiniteQueryKey(options)
    });
};

export const postMonitorsByIdResetQueryKey = (options: Options<PostMonitorsByIdResetData>) => createQueryKey('postMonitorsByIdReset', options);

/**
 * Reset monitor data (heartbeats and stats)
 */
export const postMonitorsByIdResetOptions = (options: Options<PostMonitorsByIdResetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMonitorsByIdReset({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMonitorsByIdResetQueryKey(options)
    });
};

/**
 * Reset monitor data (heartbeats and stats)
 */
export const postMonitorsByIdResetMutation = (options?: Partial<Options<PostMonitorsByIdResetData>>): UseMutationOptions<PostMonitorsByIdResetResponse, AxiosError<PostMonitorsByIdResetError>, Options<PostMonitorsByIdResetData>> => {
    const mutationOptions: UseMutationOptions<PostMonitorsByIdResetResponse, AxiosError<PostMonitorsByIdResetError>, Options<PostMonitorsByIdResetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMonitorsByIdReset({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMonitorsByIdStatsPointsQueryKey = (options: Options<GetMonitorsByIdStatsPointsData>) => createQueryKey('getMonitorsByIdStatsPoints', options);

/**
 * Get monitor stat points (ping/up/down) from stats tables
 */
export const getMonitorsByIdStatsPointsOptions = (options: Options<GetMonitorsByIdStatsPointsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMonitorsByIdStatsPoints({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMonitorsByIdStatsPointsQueryKey(options)
    });
};

export const getMonitorsByIdStatsUptimeQueryKey = (options: Options<GetMonitorsByIdStatsUptimeData>) => createQueryKey('getMonitorsByIdStatsUptime', options);

/**
 * Get monitor uptime stats (24h, 30d, 365d)
 */
export const getMonitorsByIdStatsUptimeOptions = (options: Options<GetMonitorsByIdStatsUptimeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMonitorsByIdStatsUptime({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMonitorsByIdStatsUptimeQueryKey(options)
    });
};

export const getNotificationChannelsQueryKey = (options?: Options<GetNotificationChannelsData>) => createQueryKey('getNotificationChannels', options);

/**
 * Get notification channels
 */
export const getNotificationChannelsOptions = (options?: Options<GetNotificationChannelsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNotificationChannels({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNotificationChannelsQueryKey(options)
    });
};

export const getNotificationChannelsInfiniteQueryKey = (options?: Options<GetNotificationChannelsData>): QueryKey<Options<GetNotificationChannelsData>> => createQueryKey('getNotificationChannels', options, true);

/**
 * Get notification channels
 */
export const getNotificationChannelsInfiniteOptions = (options?: Options<GetNotificationChannelsData>) => {
    return infiniteQueryOptions<GetNotificationChannelsResponse, AxiosError<GetNotificationChannelsError>, InfiniteData<GetNotificationChannelsResponse>, QueryKey<Options<GetNotificationChannelsData>>, number | Pick<QueryKey<Options<GetNotificationChannelsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNotificationChannelsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNotificationChannels({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNotificationChannelsInfiniteQueryKey(options)
    });
};

export const postNotificationChannelsQueryKey = (options: Options<PostNotificationChannelsData>) => createQueryKey('postNotificationChannels', options);

/**
 * Create notification channel
 */
export const postNotificationChannelsOptions = (options: Options<PostNotificationChannelsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNotificationChannels({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNotificationChannelsQueryKey(options)
    });
};

/**
 * Create notification channel
 */
export const postNotificationChannelsMutation = (options?: Partial<Options<PostNotificationChannelsData>>): UseMutationOptions<PostNotificationChannelsResponse, AxiosError<PostNotificationChannelsError>, Options<PostNotificationChannelsData>> => {
    const mutationOptions: UseMutationOptions<PostNotificationChannelsResponse, AxiosError<PostNotificationChannelsError>, Options<PostNotificationChannelsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNotificationChannels({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNotificationChannelsTestQueryKey = (options: Options<PostNotificationChannelsTestData>) => createQueryKey('postNotificationChannelsTest', options);

/**
 * Test notification channel
 */
export const postNotificationChannelsTestOptions = (options: Options<PostNotificationChannelsTestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNotificationChannelsTest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNotificationChannelsTestQueryKey(options)
    });
};

/**
 * Test notification channel
 */
export const postNotificationChannelsTestMutation = (options?: Partial<Options<PostNotificationChannelsTestData>>): UseMutationOptions<PostNotificationChannelsTestResponse, AxiosError<PostNotificationChannelsTestError>, Options<PostNotificationChannelsTestData>> => {
    const mutationOptions: UseMutationOptions<PostNotificationChannelsTestResponse, AxiosError<PostNotificationChannelsTestError>, Options<PostNotificationChannelsTestData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNotificationChannelsTest({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete notification channel
 */
export const deleteNotificationChannelsByIdMutation = (options?: Partial<Options<DeleteNotificationChannelsByIdData>>): UseMutationOptions<DeleteNotificationChannelsByIdResponse, AxiosError<DeleteNotificationChannelsByIdError>, Options<DeleteNotificationChannelsByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteNotificationChannelsByIdResponse, AxiosError<DeleteNotificationChannelsByIdError>, Options<DeleteNotificationChannelsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNotificationChannelsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNotificationChannelsByIdQueryKey = (options: Options<GetNotificationChannelsByIdData>) => createQueryKey('getNotificationChannelsById', options);

/**
 * Get notification channel by ID
 */
export const getNotificationChannelsByIdOptions = (options: Options<GetNotificationChannelsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNotificationChannelsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNotificationChannelsByIdQueryKey(options)
    });
};

/**
 * Update notification channel
 */
export const patchNotificationChannelsByIdMutation = (options?: Partial<Options<PatchNotificationChannelsByIdData>>): UseMutationOptions<PatchNotificationChannelsByIdResponse, AxiosError<PatchNotificationChannelsByIdError>, Options<PatchNotificationChannelsByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchNotificationChannelsByIdResponse, AxiosError<PatchNotificationChannelsByIdError>, Options<PatchNotificationChannelsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchNotificationChannelsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update notification channel
 */
export const putNotificationChannelsByIdMutation = (options?: Partial<Options<PutNotificationChannelsByIdData>>): UseMutationOptions<PutNotificationChannelsByIdResponse, AxiosError<PutNotificationChannelsByIdError>, Options<PutNotificationChannelsByIdData>> => {
    const mutationOptions: UseMutationOptions<PutNotificationChannelsByIdResponse, AxiosError<PutNotificationChannelsByIdError>, Options<PutNotificationChannelsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putNotificationChannelsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProxiesQueryKey = (options?: Options<GetProxiesData>) => createQueryKey('getProxies', options);

/**
 * Get proxies
 */
export const getProxiesOptions = (options?: Options<GetProxiesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProxies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProxiesQueryKey(options)
    });
};

export const getProxiesInfiniteQueryKey = (options?: Options<GetProxiesData>): QueryKey<Options<GetProxiesData>> => createQueryKey('getProxies', options, true);

/**
 * Get proxies
 */
export const getProxiesInfiniteOptions = (options?: Options<GetProxiesData>) => {
    return infiniteQueryOptions<GetProxiesResponse, AxiosError<GetProxiesError>, InfiniteData<GetProxiesResponse>, QueryKey<Options<GetProxiesData>>, number | Pick<QueryKey<Options<GetProxiesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetProxiesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getProxies({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProxiesInfiniteQueryKey(options)
    });
};

export const postProxiesQueryKey = (options: Options<PostProxiesData>) => createQueryKey('postProxies', options);

/**
 * Create proxy
 */
export const postProxiesOptions = (options: Options<PostProxiesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postProxies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postProxiesQueryKey(options)
    });
};

/**
 * Create proxy
 */
export const postProxiesMutation = (options?: Partial<Options<PostProxiesData>>): UseMutationOptions<PostProxiesResponse, AxiosError<PostProxiesError>, Options<PostProxiesData>> => {
    const mutationOptions: UseMutationOptions<PostProxiesResponse, AxiosError<PostProxiesError>, Options<PostProxiesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postProxies({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete proxy
 */
export const deleteProxiesByIdMutation = (options?: Partial<Options<DeleteProxiesByIdData>>): UseMutationOptions<DeleteProxiesByIdResponse, AxiosError<DeleteProxiesByIdError>, Options<DeleteProxiesByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteProxiesByIdResponse, AxiosError<DeleteProxiesByIdError>, Options<DeleteProxiesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteProxiesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProxiesByIdQueryKey = (options: Options<GetProxiesByIdData>) => createQueryKey('getProxiesById', options);

/**
 * Get proxy by ID
 */
export const getProxiesByIdOptions = (options: Options<GetProxiesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProxiesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProxiesByIdQueryKey(options)
    });
};

/**
 * Update proxy
 */
export const patchProxiesByIdMutation = (options?: Partial<Options<PatchProxiesByIdData>>): UseMutationOptions<PatchProxiesByIdResponse, AxiosError<PatchProxiesByIdError>, Options<PatchProxiesByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchProxiesByIdResponse, AxiosError<PatchProxiesByIdError>, Options<PatchProxiesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchProxiesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update proxy
 */
export const putProxiesByIdMutation = (options?: Partial<Options<PutProxiesByIdData>>): UseMutationOptions<PutProxiesByIdResponse, AxiosError<PutProxiesByIdError>, Options<PutProxiesByIdData>> => {
    const mutationOptions: UseMutationOptions<PutProxiesByIdResponse, AxiosError<PutProxiesByIdError>, Options<PutProxiesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putProxiesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete setting by key
 */
export const deleteSettingsKeyByKeyMutation = (options?: Partial<Options<DeleteSettingsKeyByKeyData>>): UseMutationOptions<DeleteSettingsKeyByKeyResponse, AxiosError<DeleteSettingsKeyByKeyError>, Options<DeleteSettingsKeyByKeyData>> => {
    const mutationOptions: UseMutationOptions<DeleteSettingsKeyByKeyResponse, AxiosError<DeleteSettingsKeyByKeyError>, Options<DeleteSettingsKeyByKeyData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteSettingsKeyByKey({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSettingsKeyByKeyQueryKey = (options: Options<GetSettingsKeyByKeyData>) => createQueryKey('getSettingsKeyByKey', options);

/**
 * Get setting by key
 */
export const getSettingsKeyByKeyOptions = (options: Options<GetSettingsKeyByKeyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSettingsKeyByKey({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSettingsKeyByKeyQueryKey(options)
    });
};

/**
 * Set setting by key
 */
export const putSettingsKeyByKeyMutation = (options?: Partial<Options<PutSettingsKeyByKeyData>>): UseMutationOptions<PutSettingsKeyByKeyResponse, AxiosError<PutSettingsKeyByKeyError>, Options<PutSettingsKeyByKeyData>> => {
    const mutationOptions: UseMutationOptions<PutSettingsKeyByKeyResponse, AxiosError<PutSettingsKeyByKeyError>, Options<PutSettingsKeyByKeyData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putSettingsKeyByKey({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getStatusPagesQueryKey = (options?: Options<GetStatusPagesData>) => createQueryKey('getStatusPages', options);

/**
 * Get all status pages
 */
export const getStatusPagesOptions = (options?: Options<GetStatusPagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatusPages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatusPagesQueryKey(options)
    });
};

export const getStatusPagesInfiniteQueryKey = (options?: Options<GetStatusPagesData>): QueryKey<Options<GetStatusPagesData>> => createQueryKey('getStatusPages', options, true);

/**
 * Get all status pages
 */
export const getStatusPagesInfiniteOptions = (options?: Options<GetStatusPagesData>) => {
    return infiniteQueryOptions<GetStatusPagesResponse, AxiosError<GetStatusPagesError>, InfiniteData<GetStatusPagesResponse>, QueryKey<Options<GetStatusPagesData>>, number | Pick<QueryKey<Options<GetStatusPagesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetStatusPagesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getStatusPages({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatusPagesInfiniteQueryKey(options)
    });
};

export const postStatusPagesQueryKey = (options: Options<PostStatusPagesData>) => createQueryKey('postStatusPages', options);

/**
 * Create a new status page
 */
export const postStatusPagesOptions = (options: Options<PostStatusPagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postStatusPages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postStatusPagesQueryKey(options)
    });
};

/**
 * Create a new status page
 */
export const postStatusPagesMutation = (options?: Partial<Options<PostStatusPagesData>>): UseMutationOptions<PostStatusPagesResponse, AxiosError<PostStatusPagesError>, Options<PostStatusPagesData>> => {
    const mutationOptions: UseMutationOptions<PostStatusPagesResponse, AxiosError<PostStatusPagesError>, Options<PostStatusPagesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postStatusPages({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getStatusPagesDomainByDomainQueryKey = (options: Options<GetStatusPagesDomainByDomainData>) => createQueryKey('getStatusPagesDomainByDomain', options);

/**
 * Get a status page by domain name
 */
export const getStatusPagesDomainByDomainOptions = (options: Options<GetStatusPagesDomainByDomainData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatusPagesDomainByDomain({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatusPagesDomainByDomainQueryKey(options)
    });
};

export const getStatusPagesSlugBySlugQueryKey = (options: Options<GetStatusPagesSlugBySlugData>) => createQueryKey('getStatusPagesSlugBySlug', options);

/**
 * Get a status page by slug
 */
export const getStatusPagesSlugBySlugOptions = (options: Options<GetStatusPagesSlugBySlugData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatusPagesSlugBySlug({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatusPagesSlugBySlugQueryKey(options)
    });
};

export const getStatusPagesSlugBySlugMonitorsQueryKey = (options: Options<GetStatusPagesSlugBySlugMonitorsData>) => createQueryKey('getStatusPagesSlugBySlugMonitors', options);

/**
 * Get monitors for a status page by slug with heartbeats and uptime
 */
export const getStatusPagesSlugBySlugMonitorsOptions = (options: Options<GetStatusPagesSlugBySlugMonitorsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatusPagesSlugBySlugMonitors({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatusPagesSlugBySlugMonitorsQueryKey(options)
    });
};

export const getStatusPagesSlugBySlugMonitorsHomepageQueryKey = (options: Options<GetStatusPagesSlugBySlugMonitorsHomepageData>) => createQueryKey('getStatusPagesSlugBySlugMonitorsHomepage', options);

/**
 * Get monitors for a status page by slug for homepage
 */
export const getStatusPagesSlugBySlugMonitorsHomepageOptions = (options: Options<GetStatusPagesSlugBySlugMonitorsHomepageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatusPagesSlugBySlugMonitorsHomepage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatusPagesSlugBySlugMonitorsHomepageQueryKey(options)
    });
};

/**
 * Delete a status page
 */
export const deleteStatusPagesByIdMutation = (options?: Partial<Options<DeleteStatusPagesByIdData>>): UseMutationOptions<DeleteStatusPagesByIdResponse, AxiosError<DeleteStatusPagesByIdError>, Options<DeleteStatusPagesByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteStatusPagesByIdResponse, AxiosError<DeleteStatusPagesByIdError>, Options<DeleteStatusPagesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteStatusPagesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getStatusPagesByIdQueryKey = (options: Options<GetStatusPagesByIdData>) => createQueryKey('getStatusPagesById', options);

/**
 * Get a status page by ID
 */
export const getStatusPagesByIdOptions = (options: Options<GetStatusPagesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatusPagesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatusPagesByIdQueryKey(options)
    });
};

/**
 * Update a status page
 */
export const patchStatusPagesByIdMutation = (options?: Partial<Options<PatchStatusPagesByIdData>>): UseMutationOptions<PatchStatusPagesByIdResponse, AxiosError<PatchStatusPagesByIdError>, Options<PatchStatusPagesByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchStatusPagesByIdResponse, AxiosError<PatchStatusPagesByIdError>, Options<PatchStatusPagesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchStatusPagesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTagsQueryKey = (options?: Options<GetTagsData>) => createQueryKey('getTags', options);

/**
 * Get tags
 */
export const getTagsOptions = (options?: Options<GetTagsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTags({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTagsQueryKey(options)
    });
};

export const getTagsInfiniteQueryKey = (options?: Options<GetTagsData>): QueryKey<Options<GetTagsData>> => createQueryKey('getTags', options, true);

/**
 * Get tags
 */
export const getTagsInfiniteOptions = (options?: Options<GetTagsData>) => {
    return infiniteQueryOptions<GetTagsResponse, AxiosError<GetTagsError>, InfiniteData<GetTagsResponse>, QueryKey<Options<GetTagsData>>, number | Pick<QueryKey<Options<GetTagsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetTagsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getTags({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTagsInfiniteQueryKey(options)
    });
};

export const postTagsQueryKey = (options: Options<PostTagsData>) => createQueryKey('postTags', options);

/**
 * Create tag
 */
export const postTagsOptions = (options: Options<PostTagsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postTags({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postTagsQueryKey(options)
    });
};

/**
 * Create tag
 */
export const postTagsMutation = (options?: Partial<Options<PostTagsData>>): UseMutationOptions<PostTagsResponse, AxiosError<PostTagsError>, Options<PostTagsData>> => {
    const mutationOptions: UseMutationOptions<PostTagsResponse, AxiosError<PostTagsError>, Options<PostTagsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postTags({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete tag
 */
export const deleteTagsByIdMutation = (options?: Partial<Options<DeleteTagsByIdData>>): UseMutationOptions<DeleteTagsByIdResponse, AxiosError<DeleteTagsByIdError>, Options<DeleteTagsByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteTagsByIdResponse, AxiosError<DeleteTagsByIdError>, Options<DeleteTagsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTagsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTagsByIdQueryKey = (options: Options<GetTagsByIdData>) => createQueryKey('getTagsById', options);

/**
 * Get tag by ID
 */
export const getTagsByIdOptions = (options: Options<GetTagsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTagsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTagsByIdQueryKey(options)
    });
};

/**
 * Update tag
 */
export const patchTagsByIdMutation = (options?: Partial<Options<PatchTagsByIdData>>): UseMutationOptions<PatchTagsByIdResponse, AxiosError<PatchTagsByIdError>, Options<PatchTagsByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchTagsByIdResponse, AxiosError<PatchTagsByIdError>, Options<PatchTagsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchTagsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update tag
 */
export const putTagsByIdMutation = (options?: Partial<Options<PutTagsByIdData>>): UseMutationOptions<PutTagsByIdResponse, AxiosError<PutTagsByIdError>, Options<PutTagsByIdData>> => {
    const mutationOptions: UseMutationOptions<PutTagsByIdResponse, AxiosError<PutTagsByIdError>, Options<PutTagsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putTagsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getVersionQueryKey = (options?: Options<GetVersionData>) => createQueryKey('getVersion', options);

/**
 * Get server version
 * Returns the current server version
 */
export const getVersionOptions = (options?: Options<GetVersionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVersion({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getVersionQueryKey(options)
    });
};